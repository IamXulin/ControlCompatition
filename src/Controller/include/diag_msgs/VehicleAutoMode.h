// Generated by gencpp from file diag_msgs/VehicleAutoMode.msg
// DO NOT EDIT!


#ifndef DIAG_MSGS_MESSAGE_VEHICLEAUTOMODE_H
#define DIAG_MSGS_MESSAGE_VEHICLEAUTOMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diag_msgs
{
template <class ContainerAllocator>
struct VehicleAutoMode_
{
  typedef VehicleAutoMode_<ContainerAllocator> Type;

  VehicleAutoMode_()
    : timestamp(0.0)
    , mode(0)  {
    }
  VehicleAutoMode_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , mode(0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int8_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleAutoMode_

typedef ::diag_msgs::VehicleAutoMode_<std::allocator<void> > VehicleAutoMode;

typedef boost::shared_ptr< ::diag_msgs::VehicleAutoMode > VehicleAutoModePtr;
typedef boost::shared_ptr< ::diag_msgs::VehicleAutoMode const> VehicleAutoModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diag_msgs::VehicleAutoMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diag_msgs::VehicleAutoMode_<ContainerAllocator1> & lhs, const ::diag_msgs::VehicleAutoMode_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diag_msgs::VehicleAutoMode_<ContainerAllocator1> & lhs, const ::diag_msgs::VehicleAutoMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diag_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b568501aa33db2738b7eb03f0659ef49";
  }

  static const char* value(const ::diag_msgs::VehicleAutoMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb568501aa33db273ULL;
  static const uint64_t static_value2 = 0x8b7eb03f0659ef49ULL;
};

template<class ContainerAllocator>
struct DataType< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diag_msgs/VehicleAutoMode";
  }

  static const char* value(const ::diag_msgs::VehicleAutoMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n"
"int8 mode\n"
"\n"
;
  }

  static const char* value(const ::diag_msgs::VehicleAutoMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleAutoMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diag_msgs::VehicleAutoMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diag_msgs::VehicleAutoMode_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIAG_MSGS_MESSAGE_VEHICLEAUTOMODE_H
