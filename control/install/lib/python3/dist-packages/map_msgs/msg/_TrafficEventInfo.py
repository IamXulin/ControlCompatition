# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from map_msgs/TrafficEventInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import map_msgs.msg

class TrafficEventInfo(genpy.Message):
  _md5sum = "a80b9e1ae33c135a1c942694fafd78a2"
  _type = "map_msgs/TrafficEventInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id
int32 event_type 
MissionPoint event_point
bool advice_type  # 0-not recommended  1-recommended
float32 advice_weight # [0,1]

================================================================================
MSG: map_msgs/MissionPoint
float64 xg
float64 yg
float64 heading"""
  __slots__ = ['id','event_type','event_point','advice_type','advice_weight']
  _slot_types = ['int32','int32','map_msgs/MissionPoint','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,event_type,event_point,advice_type,advice_weight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficEventInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.event_type is None:
        self.event_type = 0
      if self.event_point is None:
        self.event_point = map_msgs.msg.MissionPoint()
      if self.advice_type is None:
        self.advice_type = False
      if self.advice_weight is None:
        self.advice_weight = 0.
    else:
      self.id = 0
      self.event_type = 0
      self.event_point = map_msgs.msg.MissionPoint()
      self.advice_type = False
      self.advice_weight = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3dBf().pack(_x.id, _x.event_type, _x.event_point.xg, _x.event_point.yg, _x.event_point.heading, _x.advice_type, _x.advice_weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.event_point is None:
        self.event_point = map_msgs.msg.MissionPoint()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.id, _x.event_type, _x.event_point.xg, _x.event_point.yg, _x.event_point.heading, _x.advice_type, _x.advice_weight,) = _get_struct_2i3dBf().unpack(str[start:end])
      self.advice_type = bool(self.advice_type)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3dBf().pack(_x.id, _x.event_type, _x.event_point.xg, _x.event_point.yg, _x.event_point.heading, _x.advice_type, _x.advice_weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.event_point is None:
        self.event_point = map_msgs.msg.MissionPoint()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.id, _x.event_type, _x.event_point.xg, _x.event_point.yg, _x.event_point.heading, _x.advice_type, _x.advice_weight,) = _get_struct_2i3dBf().unpack(str[start:end])
      self.advice_type = bool(self.advice_type)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3dBf = None
def _get_struct_2i3dBf():
    global _struct_2i3dBf
    if _struct_2i3dBf is None:
        _struct_2i3dBf = struct.Struct("<2i3dBf")
    return _struct_2i3dBf
