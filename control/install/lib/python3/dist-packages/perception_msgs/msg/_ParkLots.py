# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from perception_msgs/ParkLots.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import perception_msgs.msg

class ParkLots(genpy.Message):
  _md5sum = "7e2285767e08fd7713207b43fb5e7d55"
  _type = "perception_msgs/ParkLots"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ParkLot[] ParkLots
================================================================================
MSG: perception_msgs/ParkLot
Point64 center
float64 length_
float64 width_
Point2D front_left
Point2D front_right
Point2D rear_left
Point2D rear_right

bool status
int32 type

================================================================================
MSG: perception_msgs/Point64
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float64 x
float64 y
float64 z

================================================================================
MSG: perception_msgs/Point2D
float64 x
float64 y
"""
  __slots__ = ['ParkLots']
  _slot_types = ['perception_msgs/ParkLot[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ParkLots

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParkLots, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ParkLots is None:
        self.ParkLots = []
    else:
      self.ParkLots = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ParkLots)
      buff.write(_struct_I.pack(length))
      for val1 in self.ParkLots:
        _v1 = val1.center
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.length_, _x.width_))
        _v2 = val1.front_left
        _x = _v2
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v3 = val1.front_right
        _x = _v3
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v4 = val1.rear_left
        _x = _v4
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v5 = val1.rear_right
        _x = _v5
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.status, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ParkLots is None:
        self.ParkLots = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ParkLots = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ParkLot()
        _v6 = val1.center
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.length_, _x.width_,) = _get_struct_2d().unpack(str[start:end])
        _v7 = val1.front_left
        _x = _v7
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v8 = val1.front_right
        _x = _v8
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v9 = val1.rear_left
        _x = _v9
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v10 = val1.rear_right
        _x = _v10
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.status, _x.type,) = _get_struct_Bi().unpack(str[start:end])
        val1.status = bool(val1.status)
        self.ParkLots.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ParkLots)
      buff.write(_struct_I.pack(length))
      for val1 in self.ParkLots:
        _v11 = val1.center
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d().pack(_x.length_, _x.width_))
        _v12 = val1.front_left
        _x = _v12
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v13 = val1.front_right
        _x = _v13
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v14 = val1.rear_left
        _x = _v14
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v15 = val1.rear_right
        _x = _v15
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_Bi().pack(_x.status, _x.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ParkLots is None:
        self.ParkLots = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ParkLots = []
      for i in range(0, length):
        val1 = perception_msgs.msg.ParkLot()
        _v16 = val1.center
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.length_, _x.width_,) = _get_struct_2d().unpack(str[start:end])
        _v17 = val1.front_left
        _x = _v17
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v18 = val1.front_right
        _x = _v18
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v19 = val1.rear_left
        _x = _v19
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v20 = val1.rear_right
        _x = _v20
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.status, _x.type,) = _get_struct_Bi().unpack(str[start:end])
        val1.status = bool(val1.status)
        self.ParkLots.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
