// Generated by gencpp from file perception_msgs/ParkLots.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_PARKLOTS_H
#define PERCEPTION_MSGS_MESSAGE_PARKLOTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/ParkLot.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct ParkLots_
{
  typedef ParkLots_<ContainerAllocator> Type;

  ParkLots_()
    : ParkLots()  {
    }
  ParkLots_(const ContainerAllocator& _alloc)
    : ParkLots(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::perception_msgs::ParkLot_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::perception_msgs::ParkLot_<ContainerAllocator> >> _ParkLots_type;
  _ParkLots_type ParkLots;





  typedef boost::shared_ptr< ::perception_msgs::ParkLots_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::ParkLots_<ContainerAllocator> const> ConstPtr;

}; // struct ParkLots_

typedef ::perception_msgs::ParkLots_<std::allocator<void> > ParkLots;

typedef boost::shared_ptr< ::perception_msgs::ParkLots > ParkLotsPtr;
typedef boost::shared_ptr< ::perception_msgs::ParkLots const> ParkLotsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::ParkLots_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::ParkLots_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::ParkLots_<ContainerAllocator1> & lhs, const ::perception_msgs::ParkLots_<ContainerAllocator2> & rhs)
{
  return lhs.ParkLots == rhs.ParkLots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::ParkLots_<ContainerAllocator1> & lhs, const ::perception_msgs::ParkLots_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ParkLots_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ParkLots_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ParkLots_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ParkLots_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ParkLots_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ParkLots_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::ParkLots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e2285767e08fd7713207b43fb5e7d55";
  }

  static const char* value(const ::perception_msgs::ParkLots_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e2285767e08fd77ULL;
  static const uint64_t static_value2 = 0x13207b43fb5e7d55ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::ParkLots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/ParkLots";
  }

  static const char* value(const ::perception_msgs::ParkLots_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::ParkLots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ParkLot[] ParkLots\n"
"================================================================================\n"
"MSG: perception_msgs/ParkLot\n"
"Point64 center\n"
"float64 length_\n"
"float64 width_\n"
"Point2D front_left\n"
"Point2D front_right\n"
"Point2D rear_left\n"
"Point2D rear_right\n"
"\n"
"bool status\n"
"int32 type\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/Point64\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/Point2D\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::perception_msgs::ParkLots_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::ParkLots_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ParkLots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkLots_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::ParkLots_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::ParkLots_<ContainerAllocator>& v)
  {
    s << indent << "ParkLots[]" << std::endl;
    for (size_t i = 0; i < v.ParkLots.size(); ++i)
    {
      s << indent << "  ParkLots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::ParkLot_<ContainerAllocator> >::stream(s, indent + "    ", v.ParkLots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_PARKLOTS_H
