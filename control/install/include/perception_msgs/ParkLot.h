// Generated by gencpp from file perception_msgs/ParkLot.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_PARKLOT_H
#define PERCEPTION_MSGS_MESSAGE_PARKLOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/Point64.h>
#include <perception_msgs/Point2D.h>
#include <perception_msgs/Point2D.h>
#include <perception_msgs/Point2D.h>
#include <perception_msgs/Point2D.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct ParkLot_
{
  typedef ParkLot_<ContainerAllocator> Type;

  ParkLot_()
    : center()
    , length_(0.0)
    , width_(0.0)
    , front_left()
    , front_right()
    , rear_left()
    , rear_right()
    , status(false)
    , type(0)  {
    }
  ParkLot_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , length_(0.0)
    , width_(0.0)
    , front_left(_alloc)
    , front_right(_alloc)
    , rear_left(_alloc)
    , rear_right(_alloc)
    , status(false)
    , type(0)  {
  (void)_alloc;
    }



   typedef  ::perception_msgs::Point64_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef double _length__type;
  _length__type length_;

   typedef double _width__type;
  _width__type width_;

   typedef  ::perception_msgs::Point2D_<ContainerAllocator>  _front_left_type;
  _front_left_type front_left;

   typedef  ::perception_msgs::Point2D_<ContainerAllocator>  _front_right_type;
  _front_right_type front_right;

   typedef  ::perception_msgs::Point2D_<ContainerAllocator>  _rear_left_type;
  _rear_left_type rear_left;

   typedef  ::perception_msgs::Point2D_<ContainerAllocator>  _rear_right_type;
  _rear_right_type rear_right;

   typedef uint8_t _status_type;
  _status_type status;

   typedef int32_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::perception_msgs::ParkLot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::ParkLot_<ContainerAllocator> const> ConstPtr;

}; // struct ParkLot_

typedef ::perception_msgs::ParkLot_<std::allocator<void> > ParkLot;

typedef boost::shared_ptr< ::perception_msgs::ParkLot > ParkLotPtr;
typedef boost::shared_ptr< ::perception_msgs::ParkLot const> ParkLotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::ParkLot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::ParkLot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::ParkLot_<ContainerAllocator1> & lhs, const ::perception_msgs::ParkLot_<ContainerAllocator2> & rhs)
{
  return lhs.center == rhs.center &&
    lhs.length_ == rhs.length_ &&
    lhs.width_ == rhs.width_ &&
    lhs.front_left == rhs.front_left &&
    lhs.front_right == rhs.front_right &&
    lhs.rear_left == rhs.rear_left &&
    lhs.rear_right == rhs.rear_right &&
    lhs.status == rhs.status &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::ParkLot_<ContainerAllocator1> & lhs, const ::perception_msgs::ParkLot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ParkLot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ParkLot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ParkLot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ParkLot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ParkLot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ParkLot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::ParkLot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b726b4ddee7a1db7101988a09018fbc9";
  }

  static const char* value(const ::perception_msgs::ParkLot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb726b4ddee7a1db7ULL;
  static const uint64_t static_value2 = 0x101988a09018fbc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::ParkLot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/ParkLot";
  }

  static const char* value(const ::perception_msgs::ParkLot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::ParkLot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point64 center\n"
"float64 length_\n"
"float64 width_\n"
"Point2D front_left\n"
"Point2D front_right\n"
"Point2D rear_left\n"
"Point2D rear_right\n"
"\n"
"bool status\n"
"int32 type\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/Point64\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/Point2D\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::perception_msgs::ParkLot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::ParkLot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.length_);
      stream.next(m.width_);
      stream.next(m.front_left);
      stream.next(m.front_right);
      stream.next(m.rear_left);
      stream.next(m.rear_right);
      stream.next(m.status);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParkLot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::ParkLot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::ParkLot_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::perception_msgs::Point64_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "length_: ";
    Printer<double>::stream(s, indent + "  ", v.length_);
    s << indent << "width_: ";
    Printer<double>::stream(s, indent + "  ", v.width_);
    s << indent << "front_left: ";
    s << std::endl;
    Printer< ::perception_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.front_left);
    s << indent << "front_right: ";
    s << std::endl;
    Printer< ::perception_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.front_right);
    s << indent << "rear_left: ";
    s << std::endl;
    Printer< ::perception_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.rear_left);
    s << indent << "rear_right: ";
    s << std::endl;
    Printer< ::perception_msgs::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.rear_right);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_PARKLOT_H
