// Generated by gencpp from file map_msgs/TrafficEventInfo.msg
// DO NOT EDIT!


#ifndef MAP_MSGS_MESSAGE_TRAFFICEVENTINFO_H
#define MAP_MSGS_MESSAGE_TRAFFICEVENTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <map_msgs/MissionPoint.h>

namespace map_msgs
{
template <class ContainerAllocator>
struct TrafficEventInfo_
{
  typedef TrafficEventInfo_<ContainerAllocator> Type;

  TrafficEventInfo_()
    : id(0)
    , event_type(0)
    , event_point()
    , advice_type(false)
    , advice_weight(0.0)  {
    }
  TrafficEventInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , event_type(0)
    , event_point(_alloc)
    , advice_type(false)
    , advice_weight(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _event_type_type;
  _event_type_type event_type;

   typedef  ::map_msgs::MissionPoint_<ContainerAllocator>  _event_point_type;
  _event_point_type event_point;

   typedef uint8_t _advice_type_type;
  _advice_type_type advice_type;

   typedef float _advice_weight_type;
  _advice_weight_type advice_weight;





  typedef boost::shared_ptr< ::map_msgs::TrafficEventInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_msgs::TrafficEventInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficEventInfo_

typedef ::map_msgs::TrafficEventInfo_<std::allocator<void> > TrafficEventInfo;

typedef boost::shared_ptr< ::map_msgs::TrafficEventInfo > TrafficEventInfoPtr;
typedef boost::shared_ptr< ::map_msgs::TrafficEventInfo const> TrafficEventInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_msgs::TrafficEventInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::map_msgs::TrafficEventInfo_<ContainerAllocator1> & lhs, const ::map_msgs::TrafficEventInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.event_type == rhs.event_type &&
    lhs.event_point == rhs.event_point &&
    lhs.advice_type == rhs.advice_type &&
    lhs.advice_weight == rhs.advice_weight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::map_msgs::TrafficEventInfo_<ContainerAllocator1> & lhs, const ::map_msgs::TrafficEventInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace map_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_msgs::TrafficEventInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_msgs::TrafficEventInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_msgs::TrafficEventInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a80b9e1ae33c135a1c942694fafd78a2";
  }

  static const char* value(const ::map_msgs::TrafficEventInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa80b9e1ae33c135aULL;
  static const uint64_t static_value2 = 0x1c942694fafd78a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_msgs/TrafficEventInfo";
  }

  static const char* value(const ::map_msgs::TrafficEventInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 event_type \n"
"MissionPoint event_point\n"
"bool advice_type  # 0-not recommended  1-recommended\n"
"float32 advice_weight # [0,1]\n"
"\n"
"================================================================================\n"
"MSG: map_msgs/MissionPoint\n"
"float64 xg\n"
"float64 yg\n"
"float64 heading\n"
;
  }

  static const char* value(const ::map_msgs::TrafficEventInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.event_type);
      stream.next(m.event_point);
      stream.next(m.advice_type);
      stream.next(m.advice_weight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficEventInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_msgs::TrafficEventInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::TrafficEventInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "event_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event_type);
    s << indent << "event_point: ";
    s << std::endl;
    Printer< ::map_msgs::MissionPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.event_point);
    s << indent << "advice_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.advice_type);
    s << indent << "advice_weight: ";
    Printer<float>::stream(s, indent + "  ", v.advice_weight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_MSGS_MESSAGE_TRAFFICEVENTINFO_H
