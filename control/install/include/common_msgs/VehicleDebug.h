// Generated by gencpp from file common_msgs/VehicleDebug.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_VEHICLEDEBUG_H
#define COMMON_MSGS_MESSAGE_VEHICLEDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace common_msgs
{
template <class ContainerAllocator>
struct VehicleDebug_
{
  typedef VehicleDebug_<ContainerAllocator> Type;

  VehicleDebug_()
    : header()
    , flag_crawl(0)
    , crawl_speed_error(0.0)
    , crawl_veh_accel(0.0)
    , crawl_acc_pel(0.0)
    , crawl_brk_pel(0.0)
    , s_matched(0.0)
    , station_preview(0.0)
    , station_error(0.0)
    , station_error_limited(0.0)
    , speed_offset(0.0)
    , speed_preview(0.0)
    , speed_matched(0.0)
    , preview_speed_error(0.0)
    , speed_controller_input_limited(0.0)
    , acceleration_cmd_closeloop(0.0)
    , path_remain(0.0)
    , acceleration_lookup(0.0)
    , throttle_cmd(0.0)
    , brake_cmd(0.0)
    , lat_target_pointIdx(0)
    , lat_target_x(0.0)
    , lat_target_y(0.0)
    , cmd_strangle(0.0)
    , heading_error(0.0)
    , mode(0)
    , idx_trajectory_local_set(0)
    , flag_replan(0)
    , cur_gear(0.0)
    , tar_gear(0.0)
    , trajectory_flag(0)
    , loc_flag(0)
    , start_indices()
    , end_indices()
    , dist2terminal(0.0)
    , flag_terminal(0)  {
    }
  VehicleDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , flag_crawl(0)
    , crawl_speed_error(0.0)
    , crawl_veh_accel(0.0)
    , crawl_acc_pel(0.0)
    , crawl_brk_pel(0.0)
    , s_matched(0.0)
    , station_preview(0.0)
    , station_error(0.0)
    , station_error_limited(0.0)
    , speed_offset(0.0)
    , speed_preview(0.0)
    , speed_matched(0.0)
    , preview_speed_error(0.0)
    , speed_controller_input_limited(0.0)
    , acceleration_cmd_closeloop(0.0)
    , path_remain(0.0)
    , acceleration_lookup(0.0)
    , throttle_cmd(0.0)
    , brake_cmd(0.0)
    , lat_target_pointIdx(0)
    , lat_target_x(0.0)
    , lat_target_y(0.0)
    , cmd_strangle(0.0)
    , heading_error(0.0)
    , mode(0)
    , idx_trajectory_local_set(0)
    , flag_replan(0)
    , cur_gear(0.0)
    , tar_gear(0.0)
    , trajectory_flag(0)
    , loc_flag(0)
    , start_indices(_alloc)
    , end_indices(_alloc)
    , dist2terminal(0.0)
    , flag_terminal(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _flag_crawl_type;
  _flag_crawl_type flag_crawl;

   typedef double _crawl_speed_error_type;
  _crawl_speed_error_type crawl_speed_error;

   typedef double _crawl_veh_accel_type;
  _crawl_veh_accel_type crawl_veh_accel;

   typedef double _crawl_acc_pel_type;
  _crawl_acc_pel_type crawl_acc_pel;

   typedef double _crawl_brk_pel_type;
  _crawl_brk_pel_type crawl_brk_pel;

   typedef double _s_matched_type;
  _s_matched_type s_matched;

   typedef double _station_preview_type;
  _station_preview_type station_preview;

   typedef double _station_error_type;
  _station_error_type station_error;

   typedef double _station_error_limited_type;
  _station_error_limited_type station_error_limited;

   typedef double _speed_offset_type;
  _speed_offset_type speed_offset;

   typedef double _speed_preview_type;
  _speed_preview_type speed_preview;

   typedef double _speed_matched_type;
  _speed_matched_type speed_matched;

   typedef double _preview_speed_error_type;
  _preview_speed_error_type preview_speed_error;

   typedef double _speed_controller_input_limited_type;
  _speed_controller_input_limited_type speed_controller_input_limited;

   typedef double _acceleration_cmd_closeloop_type;
  _acceleration_cmd_closeloop_type acceleration_cmd_closeloop;

   typedef double _path_remain_type;
  _path_remain_type path_remain;

   typedef double _acceleration_lookup_type;
  _acceleration_lookup_type acceleration_lookup;

   typedef double _throttle_cmd_type;
  _throttle_cmd_type throttle_cmd;

   typedef double _brake_cmd_type;
  _brake_cmd_type brake_cmd;

   typedef int16_t _lat_target_pointIdx_type;
  _lat_target_pointIdx_type lat_target_pointIdx;

   typedef double _lat_target_x_type;
  _lat_target_x_type lat_target_x;

   typedef double _lat_target_y_type;
  _lat_target_y_type lat_target_y;

   typedef double _cmd_strangle_type;
  _cmd_strangle_type cmd_strangle;

   typedef double _heading_error_type;
  _heading_error_type heading_error;

   typedef int16_t _mode_type;
  _mode_type mode;

   typedef int16_t _idx_trajectory_local_set_type;
  _idx_trajectory_local_set_type idx_trajectory_local_set;

   typedef int16_t _flag_replan_type;
  _flag_replan_type flag_replan;

   typedef double _cur_gear_type;
  _cur_gear_type cur_gear;

   typedef double _tar_gear_type;
  _tar_gear_type tar_gear;

   typedef int16_t _trajectory_flag_type;
  _trajectory_flag_type trajectory_flag;

   typedef int16_t _loc_flag_type;
  _loc_flag_type loc_flag;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _start_indices_type;
  _start_indices_type start_indices;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _end_indices_type;
  _end_indices_type end_indices;

   typedef double _dist2terminal_type;
  _dist2terminal_type dist2terminal;

   typedef int16_t _flag_terminal_type;
  _flag_terminal_type flag_terminal;





  typedef boost::shared_ptr< ::common_msgs::VehicleDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::VehicleDebug_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleDebug_

typedef ::common_msgs::VehicleDebug_<std::allocator<void> > VehicleDebug;

typedef boost::shared_ptr< ::common_msgs::VehicleDebug > VehicleDebugPtr;
typedef boost::shared_ptr< ::common_msgs::VehicleDebug const> VehicleDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::VehicleDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::VehicleDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::VehicleDebug_<ContainerAllocator1> & lhs, const ::common_msgs::VehicleDebug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.flag_crawl == rhs.flag_crawl &&
    lhs.crawl_speed_error == rhs.crawl_speed_error &&
    lhs.crawl_veh_accel == rhs.crawl_veh_accel &&
    lhs.crawl_acc_pel == rhs.crawl_acc_pel &&
    lhs.crawl_brk_pel == rhs.crawl_brk_pel &&
    lhs.s_matched == rhs.s_matched &&
    lhs.station_preview == rhs.station_preview &&
    lhs.station_error == rhs.station_error &&
    lhs.station_error_limited == rhs.station_error_limited &&
    lhs.speed_offset == rhs.speed_offset &&
    lhs.speed_preview == rhs.speed_preview &&
    lhs.speed_matched == rhs.speed_matched &&
    lhs.preview_speed_error == rhs.preview_speed_error &&
    lhs.speed_controller_input_limited == rhs.speed_controller_input_limited &&
    lhs.acceleration_cmd_closeloop == rhs.acceleration_cmd_closeloop &&
    lhs.path_remain == rhs.path_remain &&
    lhs.acceleration_lookup == rhs.acceleration_lookup &&
    lhs.throttle_cmd == rhs.throttle_cmd &&
    lhs.brake_cmd == rhs.brake_cmd &&
    lhs.lat_target_pointIdx == rhs.lat_target_pointIdx &&
    lhs.lat_target_x == rhs.lat_target_x &&
    lhs.lat_target_y == rhs.lat_target_y &&
    lhs.cmd_strangle == rhs.cmd_strangle &&
    lhs.heading_error == rhs.heading_error &&
    lhs.mode == rhs.mode &&
    lhs.idx_trajectory_local_set == rhs.idx_trajectory_local_set &&
    lhs.flag_replan == rhs.flag_replan &&
    lhs.cur_gear == rhs.cur_gear &&
    lhs.tar_gear == rhs.tar_gear &&
    lhs.trajectory_flag == rhs.trajectory_flag &&
    lhs.loc_flag == rhs.loc_flag &&
    lhs.start_indices == rhs.start_indices &&
    lhs.end_indices == rhs.end_indices &&
    lhs.dist2terminal == rhs.dist2terminal &&
    lhs.flag_terminal == rhs.flag_terminal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::VehicleDebug_<ContainerAllocator1> & lhs, const ::common_msgs::VehicleDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::common_msgs::VehicleDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::VehicleDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::VehicleDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::VehicleDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::VehicleDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::VehicleDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::VehicleDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d52e92640147378e42db3b692c081abe";
  }

  static const char* value(const ::common_msgs::VehicleDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd52e92640147378eULL;
  static const uint64_t static_value2 = 0x42db3b692c081abeULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::VehicleDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/VehicleDebug";
  }

  static const char* value(const ::common_msgs::VehicleDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::VehicleDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# 蠕行\n"
"int16    flag_crawl\n"
"float64 crawl_speed_error               # 蠕行速度误差\n"
"float64 crawl_veh_accel                 # 蠕行加速度指令\n"
"float64 crawl_acc_pel                   # 油门踏板开度\n"
"float64 crawl_brk_pel                   # 制动踏板开度\n"
"\n"
"# 纵向控制\n"
"# 位置pid\n"
"float64 s_matched                       # 匹配点s  \n"
"float64 station_preview                 # 预瞄点s     \n"
"float64 station_error                   # 预瞄点位置误差      \n"
"float64 station_error_limited           # 限幅后的纵向位置误差\n"
"float64 speed_offset                    # 位置pid得到的速度补偿\n"
"# 速度pid\n"
"float64 speed_preview                   # 预瞄点参考车速\n"
"float64 speed_matched                   # 匹配点车速\n"
"float64 preview_speed_error             # 预瞄点速度误差   \n"
"float64 speed_controller_input_limited  # 限幅后的纵向速度误差\n"
"float64 acceleration_cmd_closeloop      # 速度pid得到的加速度补偿\n"
"# 加速度\n"
"float64 path_remain                     # 距离停车点的距离\n"
"float64 acceleration_lookup             # 纵向控制计算出用于查表的加速度\n"
"float64 throttle_cmd                    # 查表得到的油门开度\n"
"float64 brake_cmd                       # 查表得到的制动踏板开度\n"
"\n"
"# 横向控制    \n"
"int16   lat_target_pointIdx             # 目标点索引序号\n"
"float64 lat_target_x                    # 目标点x\n"
"float64 lat_target_y                    # 目标点x\n"
"float64 cmd_strangle                    # 方向盘转角指令\n"
"float64 heading_error                   # 用于方向盘转角补偿的航向角误差\n"
"\n"
"# 状态相关标志位\n"
"int16   mode                            # 当前驾驶模式：1（AEB）,2（Terminal_stop），3（Gear_wrong），4（Msg_lost），5（Crawl），6（Normal）\n"
"int16   idx_trajectory_local_set        # 局部轨迹集合索引序号\n"
"int16    flag_replan                     # 重规划标志位\n"
"float64 cur_gear                        # 当前档位:1P2R3N4D\n"
"float64 tar_gear                        # 目标档位\n"
"int16    trajectory_flag                 # 轨迹正常标志位\n"
"int16    loc_flag                        # 定位正常标志位\n"
"int16[] start_indices                   # 存储每段轨迹的起始索引  \n"
"int16[] end_indices                     # 存储每段轨迹的结束索引 \n"
"float64 dist2terminal                   # 到终点的距离\n"
"int16    flag_terminal                   # 终点停车标志位\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::common_msgs::VehicleDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::VehicleDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.flag_crawl);
      stream.next(m.crawl_speed_error);
      stream.next(m.crawl_veh_accel);
      stream.next(m.crawl_acc_pel);
      stream.next(m.crawl_brk_pel);
      stream.next(m.s_matched);
      stream.next(m.station_preview);
      stream.next(m.station_error);
      stream.next(m.station_error_limited);
      stream.next(m.speed_offset);
      stream.next(m.speed_preview);
      stream.next(m.speed_matched);
      stream.next(m.preview_speed_error);
      stream.next(m.speed_controller_input_limited);
      stream.next(m.acceleration_cmd_closeloop);
      stream.next(m.path_remain);
      stream.next(m.acceleration_lookup);
      stream.next(m.throttle_cmd);
      stream.next(m.brake_cmd);
      stream.next(m.lat_target_pointIdx);
      stream.next(m.lat_target_x);
      stream.next(m.lat_target_y);
      stream.next(m.cmd_strangle);
      stream.next(m.heading_error);
      stream.next(m.mode);
      stream.next(m.idx_trajectory_local_set);
      stream.next(m.flag_replan);
      stream.next(m.cur_gear);
      stream.next(m.tar_gear);
      stream.next(m.trajectory_flag);
      stream.next(m.loc_flag);
      stream.next(m.start_indices);
      stream.next(m.end_indices);
      stream.next(m.dist2terminal);
      stream.next(m.flag_terminal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::VehicleDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::VehicleDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "flag_crawl: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flag_crawl);
    s << indent << "crawl_speed_error: ";
    Printer<double>::stream(s, indent + "  ", v.crawl_speed_error);
    s << indent << "crawl_veh_accel: ";
    Printer<double>::stream(s, indent + "  ", v.crawl_veh_accel);
    s << indent << "crawl_acc_pel: ";
    Printer<double>::stream(s, indent + "  ", v.crawl_acc_pel);
    s << indent << "crawl_brk_pel: ";
    Printer<double>::stream(s, indent + "  ", v.crawl_brk_pel);
    s << indent << "s_matched: ";
    Printer<double>::stream(s, indent + "  ", v.s_matched);
    s << indent << "station_preview: ";
    Printer<double>::stream(s, indent + "  ", v.station_preview);
    s << indent << "station_error: ";
    Printer<double>::stream(s, indent + "  ", v.station_error);
    s << indent << "station_error_limited: ";
    Printer<double>::stream(s, indent + "  ", v.station_error_limited);
    s << indent << "speed_offset: ";
    Printer<double>::stream(s, indent + "  ", v.speed_offset);
    s << indent << "speed_preview: ";
    Printer<double>::stream(s, indent + "  ", v.speed_preview);
    s << indent << "speed_matched: ";
    Printer<double>::stream(s, indent + "  ", v.speed_matched);
    s << indent << "preview_speed_error: ";
    Printer<double>::stream(s, indent + "  ", v.preview_speed_error);
    s << indent << "speed_controller_input_limited: ";
    Printer<double>::stream(s, indent + "  ", v.speed_controller_input_limited);
    s << indent << "acceleration_cmd_closeloop: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_cmd_closeloop);
    s << indent << "path_remain: ";
    Printer<double>::stream(s, indent + "  ", v.path_remain);
    s << indent << "acceleration_lookup: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_lookup);
    s << indent << "throttle_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_cmd);
    s << indent << "brake_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.brake_cmd);
    s << indent << "lat_target_pointIdx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lat_target_pointIdx);
    s << indent << "lat_target_x: ";
    Printer<double>::stream(s, indent + "  ", v.lat_target_x);
    s << indent << "lat_target_y: ";
    Printer<double>::stream(s, indent + "  ", v.lat_target_y);
    s << indent << "cmd_strangle: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_strangle);
    s << indent << "heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.heading_error);
    s << indent << "mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode);
    s << indent << "idx_trajectory_local_set: ";
    Printer<int16_t>::stream(s, indent + "  ", v.idx_trajectory_local_set);
    s << indent << "flag_replan: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flag_replan);
    s << indent << "cur_gear: ";
    Printer<double>::stream(s, indent + "  ", v.cur_gear);
    s << indent << "tar_gear: ";
    Printer<double>::stream(s, indent + "  ", v.tar_gear);
    s << indent << "trajectory_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.trajectory_flag);
    s << indent << "loc_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.loc_flag);
    s << indent << "start_indices[]" << std::endl;
    for (size_t i = 0; i < v.start_indices.size(); ++i)
    {
      s << indent << "  start_indices[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.start_indices[i]);
    }
    s << indent << "end_indices[]" << std::endl;
    for (size_t i = 0; i < v.end_indices.size(); ++i)
    {
      s << indent << "  end_indices[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.end_indices[i]);
    }
    s << indent << "dist2terminal: ";
    Printer<double>::stream(s, indent + "  ", v.dist2terminal);
    s << indent << "flag_terminal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.flag_terminal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_VEHICLEDEBUG_H
