#!/usr/bin/env python
PACKAGE = "dynamic"
 
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()






#steering control
gen.add("AS_Strg_Angle_Req",int_t,0,"Strg_Angle_Req",0,-3000,3000)
strgmode_enum = gen.enum([
    gen.const("reserve0", int_t, 0, "reserve0"),
    gen.const("auto", int_t, 1, "auto"),
    gen.const("reserve2", int_t, 2, "reserve2"),
    gen.const("m_s", int_t, 3, "m_s"),
    gen.const("human", int_t, 4, "human"),
    gen.const("human_resume", int_t, 5, "human_resume"),
    gen.const("clear_error", int_t, 6, "clear_error")], "Strg")
gen.add("AS_Strg_WorkMode_Req",int_t,0,"Strg_WorkMode_Req",0,0,6,edit_method=strgmode_enum)
strg0_enable_enum = gen.enum([
    gen.const("not_active0", int_t, 0, "not_active0"),
    gen.const("invalid10", int_t, 1, "invalid10"),
    gen.const("invalid20", int_t, 2, "invalid20"),
    gen.const("active0", int_t, 3, "active0")], "strg0_enable")
gen.add("AS_Strg0_Enable",int_t,0,"AS_Strg0_Enable",0,0,3,edit_method=strg0_enable_enum)
gen.add("AS_Steering_torque_superposition",int_t,0,"AS_Steering_torque_superposition",0,-13,13)
gen.add("AS_Strg_Spd_Req",int_t,0,"AS_Strg_Spd_Req",10,100,540)
strg1_enable_enum = gen.enum([
    gen.const("not_active1", int_t, 0, "not_active1"),
    gen.const("invalid11", int_t, 1, "invalid11"),
    gen.const("invalid21", int_t, 2, "invalid21"),
    gen.const("active1", int_t, 3, "active1")], "strg1_enable")
gen.add("AS_Strg1_Enable",int_t,0,"AS_Strg1_Enable",0,0,3,edit_method=strg1_enable_enum)
# gen.add("AS_Strg_Life_Signal",int_t,0,"AS_Strg_Life_Signal_",15,0,15)








# #drive and brake control
autod_req_enum = gen.enum([
    gen.const("not_active", int_t, 0, "not_active"),
    gen.const("active", int_t, 1, "active"),
    gen.const("error", int_t, 2, "error"),
    gen.const("invalid_autod_req", int_t, 3, "invalid_autod_req")], "AutoD_Req")
gen.add("AS_AutoD_Req",int_t,0,"AS_AutoD_Req",0,0,3,edit_method=autod_req_enum)
longit_ctrlmode_enum = gen.enum([
    gen.const("invalid_longit_ctrlmode", int_t, 0, "invalid_longit_ctrlmode"),
    gen.const("pedctrl", int_t, 1, "pedctrl"),
    gen.const("accelctrl", int_t, 2, "accelctrl"),
    gen.const("reserve", int_t, 3, "reserve")], "Longit_Ctrlmode")
gen.add("AS_Longit_Ctrlmode",int_t,0,"AS_Longit_Ctrlmode_",0,0,3,edit_method=longit_ctrlmode_enum)
gen.add("AS_AutoD_EmergBrk_Release",int_t,0,"AS_AutoD_EmergBrk_Release_",0,0,1)
autod_collision_release_enum = gen.enum([
    gen.const("not_release", int_t, 0, "not_release"),
    gen.const("front_release", int_t, 1, "front_release"),
    gen.const("rear_release", int_t, 2, "rear_release"),], "AutoD_Collision_Release")
gen.add("AS_AutoD_Collision_Release",int_t,0,"AS_AutoD_Collision_Release_",0,0,2,edit_method=autod_collision_release_enum)
gen.add("AS_AutoD_Accel_Pos_Req",int_t,0,"AS_AutoD_Accel_Pos_Req_",0,0,100)
autod_gear_enum = gen.enum([
    gen.const("invalid_gear", int_t, 0, "invalid_gear"),
    gen.const("gear_R", int_t, 1, "gear_R"),
    gen.const("gear_N", int_t, 2, "gear_N"),
    gen.const("gear_D", int_t, 3, "gear_D")], "AutoD_Shift_Req")
gen.add("AS_AutoD_Shift_Req",int_t,0,"AS_AutoD_Shift_Req_",0,0,3,edit_method=autod_gear_enum)
autod_p_gear_enum = gen.enum([
    gen.const("invalid_p_gear", int_t, 0, "invalid_p_gear"),
    gen.const("release_p", int_t, 1, "release_p"),
    gen.const("p", int_t, 2, "p")], "AutoD_P_Shift_Req")
gen.add("AS_AutoD_P_Shift_Req",int_t,0,"AS_AutoD_P_Shift_Req_",0,0,2,edit_method=autod_p_gear_enum)
autod_brkmode_enum = gen.enum([
    gen.const("major_brk", int_t, 0, "major_brk"),
    gen.const("reserved_brk", int_t, 1, "reserved_brk"),
    gen.const("invalid_brkmode", int_t, 2, "invalid_brkmode"),
    gen.const("major_reserved", int_t, 3, "major_reserved")], "AutoD_BrkMode_Req")
gen.add("AS_AutoD_BrkMode_Req",int_t,0,"AS_AutoD_BrkMode_Req_",0,0,3,edit_method=autod_brkmode_enum)
gen.add("AS_AutoD_BrkPelPos_Req",int_t,0,"AS_AutoD_BrkPelPos_Req_",0,0,100)
gen.add("AS_AutoD_Spd_Limit",int_t,0,"AS_AutoD_Spd_Limit_",0,0,100)
gen.add("AS_Auto_Acceleration_Req",int_t,0,"AS_Auto_Acceleration_Req_",0,-15,15)
# gen.add("AS_AutoD_Life_Signal",int_t,0,"AS_AutoD_Life_Signal_",0,0,15)







#speed control
gen.add("AS_AutoD_Spd_Req",int_t,0,"AS_AutoD_Spd_Req_",0,0,100)
# gen.add("AS_Spd_Life_Signal",int_t,0,"AS_Spd_Life_Signal_",0,0,15)







#lamp and door control
gen.add("AS_AlarmLamp_Req",int_t,0,"AS_AlarmLamp_Req_",0,0,1)
front_door_ctrl_req_enum = gen.enum([
    gen.const("not_operating", int_t, 0, "not_operating"),
    gen.const("open_door", int_t, 1, "open_door"),
    gen.const("close_door", int_t, 2, "close_door")], "Front_Door_Ctrl_Req")
gen.add("AS_Front_Door_Ctrl_Req",int_t,0,"AS_Front_Door_Ctrl_Req_",0,0,2,edit_method=front_door_ctrl_req_enum)
gen.add("AS_LowBeam_Start_Req",int_t,0,"AS_LowBeam_Start_Req_",0,0,1)
gen.add("AS_TurnLeftLight_Start_Req",int_t,0,"AS_TurnLeftLight_Start_Req_",0,0,1)
gen.add("AS_TurnRightLight_Start_Req",int_t,0,"AS_TurnRightLight_Start_Req_",0,0,1)
gen.add("AS_MiniLight_Start_Req",int_t,0,"AS_MiniLight_Start_Req_",0,0,1)
gen.add("AS_Horn_Start_Req",int_t,0,"AS_Horn_Start_Req_",0,0,1)
treadle_operating_req_enum = gen.enum([
    gen.const("not_operating_treadle", int_t, 0, "not_operating_treadle"),
    gen.const("run_out", int_t, 1, "run_out"),
    gen.const("take_back", int_t, 2, "take_back")], "Treadle_Operating_Req")
gen.add("AS_Treadle_Operating_Req",int_t,0,"AS_Treadle_Operating_Req_",0,0,2,edit_method=treadle_operating_req_enum)
gen.add("AS_FDoorButtonLock_Req",int_t,0,"AS_FDoorButtonLock_Req_",0,0,1)
mid_door_ctrl_req_enum = gen.enum([
    gen.const("not_operating_mid_door", int_t, 0, "not_operating_mid_door"),
    gen.const("open_mid_door", int_t, 1, "open_mid_door"),
    gen.const("close_mid_door", int_t, 2, "close_mid_door")], "Mid_Door_Ctrl_Req")
gen.add("AS_Mid_Door_Ctrl_Req",int_t,0,"AS_Mid_Door_Ctrl_Req_",0,0,2,edit_method=mid_door_ctrl_req_enum)
gen.add("AS_MDoorButtonLock_Req",int_t,0,"AS_MDoorButtonLock_Req_",0,0,1)
rear_oor_ctrl_req_enum = gen.enum([
    gen.const("not_operating_rear_door", int_t, 0, "not_operating_rear_door"),
    gen.const("open_rear_door", int_t, 1, "open_rear_door"),
    gen.const("close_rear_door", int_t, 2, "close_rear_door"),
    gen.const("open_half_rear_door", int_t, 3, "open_half_rear_door")], "Rear_Door_Ctrl_Req")
gen.add("AS_Rear_Door_Ctrl_Req",int_t,0,"AS_Rear_Door_Ctrl_Req_",0,0,3,edit_method=rear_oor_ctrl_req_enum)
gen.add("AS_RDoorButtonLock_Req",int_t,0,"AS_RDoorButtonLock_Req_",0,0,1)
gen.add("AS_FrontFog_Req",int_t,0,"AS_FrontFog_Req_",0,0,1)
gen.add("AS_RearFog_Req",int_t,0,"AS_RearFog_Req_",0,0,1)
gen.add("AS_Warninglight_Req",int_t,0,"AS_Warninglight_Req_",0,0,1)
gen.add("AS_HighBeam_Start_Req",int_t,0,"AS_HighBeam_Start_Req_",0,0,1)







#other control





exit(gen.generate(PACKAGE,"dynamic","dynamic"))   
