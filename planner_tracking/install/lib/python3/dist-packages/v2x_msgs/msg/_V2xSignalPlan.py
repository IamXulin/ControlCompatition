# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from v2x_msgs/V2xSignalPlan.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import v2x_msgs.msg

class V2xSignalPlan(genpy.Message):
  _md5sum = "582b842b457f9044d8e63f07e2785c6d"
  _type = "v2x_msgs/V2xSignalPlan"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 scene_type 
float64 timestamp  
#0:TRAFFIC_LIGHT 1:RED ALERT 2:GREEN ADVICE 3.intersection collision warning 4:Left turn assistant 
# 5:Hazardous location warning 6:Speed limit warning 7:Vulnerable road user collision warning 8:Speed limit cancel 9:alert cancel
float64 guide_speed
TrafficLightInfo light_info
ParticipantInfo participant_info
================================================================================
MSG: v2x_msgs/TrafficLightInfo
int32 color #1:green 2:red
int32 remain_time
float64 guide_spd_max
float64 guide_spd_min
float64 distance
================================================================================
MSG: v2x_msgs/ParticipantInfo
int32 device_type #0:unknown 1:motor 2:non-motor 3:pedestrain 4:sign
float64 lon
float64 lat
float64 spd
float64 distance
float64 ttc #time to crash"""
  __slots__ = ['scene_type','timestamp','guide_speed','light_info','participant_info']
  _slot_types = ['int32','float64','float64','v2x_msgs/TrafficLightInfo','v2x_msgs/ParticipantInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       scene_type,timestamp,guide_speed,light_info,participant_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(V2xSignalPlan, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.scene_type is None:
        self.scene_type = 0
      if self.timestamp is None:
        self.timestamp = 0.
      if self.guide_speed is None:
        self.guide_speed = 0.
      if self.light_info is None:
        self.light_info = v2x_msgs.msg.TrafficLightInfo()
      if self.participant_info is None:
        self.participant_info = v2x_msgs.msg.ParticipantInfo()
    else:
      self.scene_type = 0
      self.timestamp = 0.
      self.guide_speed = 0.
      self.light_info = v2x_msgs.msg.TrafficLightInfo()
      self.participant_info = v2x_msgs.msg.ParticipantInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2d2i3di5d().pack(_x.scene_type, _x.timestamp, _x.guide_speed, _x.light_info.color, _x.light_info.remain_time, _x.light_info.guide_spd_max, _x.light_info.guide_spd_min, _x.light_info.distance, _x.participant_info.device_type, _x.participant_info.lon, _x.participant_info.lat, _x.participant_info.spd, _x.participant_info.distance, _x.participant_info.ttc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.light_info is None:
        self.light_info = v2x_msgs.msg.TrafficLightInfo()
      if self.participant_info is None:
        self.participant_info = v2x_msgs.msg.ParticipantInfo()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.scene_type, _x.timestamp, _x.guide_speed, _x.light_info.color, _x.light_info.remain_time, _x.light_info.guide_spd_max, _x.light_info.guide_spd_min, _x.light_info.distance, _x.participant_info.device_type, _x.participant_info.lon, _x.participant_info.lat, _x.participant_info.spd, _x.participant_info.distance, _x.participant_info.ttc,) = _get_struct_i2d2i3di5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2d2i3di5d().pack(_x.scene_type, _x.timestamp, _x.guide_speed, _x.light_info.color, _x.light_info.remain_time, _x.light_info.guide_spd_max, _x.light_info.guide_spd_min, _x.light_info.distance, _x.participant_info.device_type, _x.participant_info.lon, _x.participant_info.lat, _x.participant_info.spd, _x.participant_info.distance, _x.participant_info.ttc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.light_info is None:
        self.light_info = v2x_msgs.msg.TrafficLightInfo()
      if self.participant_info is None:
        self.participant_info = v2x_msgs.msg.ParticipantInfo()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.scene_type, _x.timestamp, _x.guide_speed, _x.light_info.color, _x.light_info.remain_time, _x.light_info.guide_spd_max, _x.light_info.guide_spd_min, _x.light_info.distance, _x.participant_info.device_type, _x.participant_info.lon, _x.participant_info.lat, _x.participant_info.spd, _x.participant_info.distance, _x.participant_info.ttc,) = _get_struct_i2d2i3di5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2d2i3di5d = None
def _get_struct_i2d2i3di5d():
    global _struct_i2d2i3di5d
    if _struct_i2d2i3di5d is None:
        _struct_i2d2i3di5d = struct.Struct("<i2d2i3di5d")
    return _struct_i2d2i3di5d
