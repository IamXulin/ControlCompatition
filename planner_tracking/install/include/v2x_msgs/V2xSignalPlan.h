// Generated by gencpp from file v2x_msgs/V2xSignalPlan.msg
// DO NOT EDIT!


#ifndef V2X_MSGS_MESSAGE_V2XSIGNALPLAN_H
#define V2X_MSGS_MESSAGE_V2XSIGNALPLAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <v2x_msgs/TrafficLightInfo.h>
#include <v2x_msgs/ParticipantInfo.h>

namespace v2x_msgs
{
template <class ContainerAllocator>
struct V2xSignalPlan_
{
  typedef V2xSignalPlan_<ContainerAllocator> Type;

  V2xSignalPlan_()
    : scene_type(0)
    , timestamp(0.0)
    , guide_speed(0.0)
    , light_info()
    , participant_info()  {
    }
  V2xSignalPlan_(const ContainerAllocator& _alloc)
    : scene_type(0)
    , timestamp(0.0)
    , guide_speed(0.0)
    , light_info(_alloc)
    , participant_info(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _scene_type_type;
  _scene_type_type scene_type;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef double _guide_speed_type;
  _guide_speed_type guide_speed;

   typedef  ::v2x_msgs::TrafficLightInfo_<ContainerAllocator>  _light_info_type;
  _light_info_type light_info;

   typedef  ::v2x_msgs::ParticipantInfo_<ContainerAllocator>  _participant_info_type;
  _participant_info_type participant_info;





  typedef boost::shared_ptr< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> const> ConstPtr;

}; // struct V2xSignalPlan_

typedef ::v2x_msgs::V2xSignalPlan_<std::allocator<void> > V2xSignalPlan;

typedef boost::shared_ptr< ::v2x_msgs::V2xSignalPlan > V2xSignalPlanPtr;
typedef boost::shared_ptr< ::v2x_msgs::V2xSignalPlan const> V2xSignalPlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator1> & lhs, const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator2> & rhs)
{
  return lhs.scene_type == rhs.scene_type &&
    lhs.timestamp == rhs.timestamp &&
    lhs.guide_speed == rhs.guide_speed &&
    lhs.light_info == rhs.light_info &&
    lhs.participant_info == rhs.participant_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator1> & lhs, const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace v2x_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "582b842b457f9044d8e63f07e2785c6d";
  }

  static const char* value(const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x582b842b457f9044ULL;
  static const uint64_t static_value2 = 0xd8e63f07e2785c6dULL;
};

template<class ContainerAllocator>
struct DataType< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "v2x_msgs/V2xSignalPlan";
  }

  static const char* value(const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 scene_type \n"
"float64 timestamp  \n"
"#0:TRAFFIC_LIGHT 1:RED ALERT 2:GREEN ADVICE 3.intersection collision warning 4:Left turn assistant \n"
"# 5:Hazardous location warning 6:Speed limit warning 7:Vulnerable road user collision warning 8:Speed limit cancel 9:alert cancel\n"
"float64 guide_speed\n"
"TrafficLightInfo light_info\n"
"ParticipantInfo participant_info\n"
"================================================================================\n"
"MSG: v2x_msgs/TrafficLightInfo\n"
"int32 color #1:green 2:red\n"
"int32 remain_time\n"
"float64 guide_spd_max\n"
"float64 guide_spd_min\n"
"float64 distance\n"
"================================================================================\n"
"MSG: v2x_msgs/ParticipantInfo\n"
"int32 device_type #0:unknown 1:motor 2:non-motor 3:pedestrain 4:sign\n"
"float64 lon\n"
"float64 lat\n"
"float64 spd\n"
"float64 distance\n"
"float64 ttc #time to crash\n"
;
  }

  static const char* value(const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scene_type);
      stream.next(m.timestamp);
      stream.next(m.guide_speed);
      stream.next(m.light_info);
      stream.next(m.participant_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct V2xSignalPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::v2x_msgs::V2xSignalPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::v2x_msgs::V2xSignalPlan_<ContainerAllocator>& v)
  {
    s << indent << "scene_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.scene_type);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "guide_speed: ";
    Printer<double>::stream(s, indent + "  ", v.guide_speed);
    s << indent << "light_info: ";
    s << std::endl;
    Printer< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.light_info);
    s << indent << "participant_info: ";
    s << std::endl;
    Printer< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.participant_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_MSGS_MESSAGE_V2XSIGNALPLAN_H
