// Generated by gencpp from file v2x_msgs/ParticipantInfo.msg
// DO NOT EDIT!


#ifndef V2X_MSGS_MESSAGE_PARTICIPANTINFO_H
#define V2X_MSGS_MESSAGE_PARTICIPANTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace v2x_msgs
{
template <class ContainerAllocator>
struct ParticipantInfo_
{
  typedef ParticipantInfo_<ContainerAllocator> Type;

  ParticipantInfo_()
    : device_type(0)
    , lon(0.0)
    , lat(0.0)
    , spd(0.0)
    , distance(0.0)
    , ttc(0.0)  {
    }
  ParticipantInfo_(const ContainerAllocator& _alloc)
    : device_type(0)
    , lon(0.0)
    , lat(0.0)
    , spd(0.0)
    , distance(0.0)
    , ttc(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _device_type_type;
  _device_type_type device_type;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _spd_type;
  _spd_type spd;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _ttc_type;
  _ttc_type ttc;





  typedef boost::shared_ptr< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ParticipantInfo_

typedef ::v2x_msgs::ParticipantInfo_<std::allocator<void> > ParticipantInfo;

typedef boost::shared_ptr< ::v2x_msgs::ParticipantInfo > ParticipantInfoPtr;
typedef boost::shared_ptr< ::v2x_msgs::ParticipantInfo const> ParticipantInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::v2x_msgs::ParticipantInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::v2x_msgs::ParticipantInfo_<ContainerAllocator1> & lhs, const ::v2x_msgs::ParticipantInfo_<ContainerAllocator2> & rhs)
{
  return lhs.device_type == rhs.device_type &&
    lhs.lon == rhs.lon &&
    lhs.lat == rhs.lat &&
    lhs.spd == rhs.spd &&
    lhs.distance == rhs.distance &&
    lhs.ttc == rhs.ttc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::v2x_msgs::ParticipantInfo_<ContainerAllocator1> & lhs, const ::v2x_msgs::ParticipantInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace v2x_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ec314307a8a1b5de306557a58fcd4a8";
  }

  static const char* value(const ::v2x_msgs::ParticipantInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ec314307a8a1b5dULL;
  static const uint64_t static_value2 = 0xe306557a58fcd4a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "v2x_msgs/ParticipantInfo";
  }

  static const char* value(const ::v2x_msgs::ParticipantInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 device_type #0:unknown 1:motor 2:non-motor 3:pedestrain 4:sign\n"
"float64 lon\n"
"float64 lat\n"
"float64 spd\n"
"float64 distance\n"
"float64 ttc #time to crash\n"
;
  }

  static const char* value(const ::v2x_msgs::ParticipantInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_type);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.spd);
      stream.next(m.distance);
      stream.next(m.ttc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParticipantInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::v2x_msgs::ParticipantInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::v2x_msgs::ParticipantInfo_<ContainerAllocator>& v)
  {
    s << indent << "device_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.device_type);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "spd: ";
    Printer<double>::stream(s, indent + "  ", v.spd);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "ttc: ";
    Printer<double>::stream(s, indent + "  ", v.ttc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_MSGS_MESSAGE_PARTICIPANTINFO_H
