// Generated by gencpp from file v2x_msgs/TrafficLightInfo.msg
// DO NOT EDIT!


#ifndef V2X_MSGS_MESSAGE_TRAFFICLIGHTINFO_H
#define V2X_MSGS_MESSAGE_TRAFFICLIGHTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace v2x_msgs
{
template <class ContainerAllocator>
struct TrafficLightInfo_
{
  typedef TrafficLightInfo_<ContainerAllocator> Type;

  TrafficLightInfo_()
    : color(0)
    , remain_time(0)
    , guide_spd_max(0.0)
    , guide_spd_min(0.0)
    , distance(0.0)  {
    }
  TrafficLightInfo_(const ContainerAllocator& _alloc)
    : color(0)
    , remain_time(0)
    , guide_spd_max(0.0)
    , guide_spd_min(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _color_type;
  _color_type color;

   typedef int32_t _remain_time_type;
  _remain_time_type remain_time;

   typedef double _guide_spd_max_type;
  _guide_spd_max_type guide_spd_max;

   typedef double _guide_spd_min_type;
  _guide_spd_min_type guide_spd_min;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightInfo_

typedef ::v2x_msgs::TrafficLightInfo_<std::allocator<void> > TrafficLightInfo;

typedef boost::shared_ptr< ::v2x_msgs::TrafficLightInfo > TrafficLightInfoPtr;
typedef boost::shared_ptr< ::v2x_msgs::TrafficLightInfo const> TrafficLightInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator1> & lhs, const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.remain_time == rhs.remain_time &&
    lhs.guide_spd_max == rhs.guide_spd_max &&
    lhs.guide_spd_min == rhs.guide_spd_min &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator1> & lhs, const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace v2x_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "287695cdadea22560878ef129b7d46e0";
  }

  static const char* value(const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x287695cdadea2256ULL;
  static const uint64_t static_value2 = 0x0878ef129b7d46e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "v2x_msgs/TrafficLightInfo";
  }

  static const char* value(const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 color #1:green 2:red\n"
"int32 remain_time\n"
"float64 guide_spd_max\n"
"float64 guide_spd_min\n"
"float64 distance\n"
;
  }

  static const char* value(const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.remain_time);
      stream.next(m.guide_spd_max);
      stream.next(m.guide_spd_min);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::v2x_msgs::TrafficLightInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::v2x_msgs::TrafficLightInfo_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<int32_t>::stream(s, indent + "  ", v.color);
    s << indent << "remain_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.remain_time);
    s << indent << "guide_spd_max: ";
    Printer<double>::stream(s, indent + "  ", v.guide_spd_max);
    s << indent << "guide_spd_min: ";
    Printer<double>::stream(s, indent + "  ", v.guide_spd_min);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_MSGS_MESSAGE_TRAFFICLIGHTINFO_H
