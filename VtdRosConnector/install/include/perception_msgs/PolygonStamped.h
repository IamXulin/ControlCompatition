// Generated by gencpp from file perception_msgs/PolygonStamped.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_POLYGONSTAMPED_H
#define PERCEPTION_MSGS_MESSAGE_POLYGONSTAMPED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_msgs/Polygonbus.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct PolygonStamped_
{
  typedef PolygonStamped_<ContainerAllocator> Type;

  PolygonStamped_()
    : header()
    , polygon()  {
    }
  PolygonStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , polygon(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::perception_msgs::Polygonbus_<ContainerAllocator>  _polygon_type;
  _polygon_type polygon;





  typedef boost::shared_ptr< ::perception_msgs::PolygonStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::PolygonStamped_<ContainerAllocator> const> ConstPtr;

}; // struct PolygonStamped_

typedef ::perception_msgs::PolygonStamped_<std::allocator<void> > PolygonStamped;

typedef boost::shared_ptr< ::perception_msgs::PolygonStamped > PolygonStampedPtr;
typedef boost::shared_ptr< ::perception_msgs::PolygonStamped const> PolygonStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::PolygonStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::PolygonStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception_msgs::PolygonStamped_<ContainerAllocator1> & lhs, const ::perception_msgs::PolygonStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.polygon == rhs.polygon;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception_msgs::PolygonStamped_<ContainerAllocator1> & lhs, const ::perception_msgs::PolygonStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::PolygonStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::PolygonStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::PolygonStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2af1629fd1064d1021af937d9d91ec63";
  }

  static const char* value(const ::perception_msgs::PolygonStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2af1629fd1064d10ULL;
  static const uint64_t static_value2 = 0x21af937d9d91ec63ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/PolygonStamped";
  }

  static const char* value(const ::perception_msgs::PolygonStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents a Polygon with reference coordinate frame and timestamp\n"
"Header header\n"
"Polygonbus polygon\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/Polygonbus\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point64[] points\n"
"\n"
"================================================================================\n"
"MSG: perception_msgs/Point64\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::perception_msgs::PolygonStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.polygon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolygonStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::PolygonStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::PolygonStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "polygon: ";
    s << std::endl;
    Printer< ::perception_msgs::Polygonbus_<ContainerAllocator> >::stream(s, indent + "  ", v.polygon);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_POLYGONSTAMPED_H
