// Generated by gencpp from file control_msgs/Jinlong_Control_ModeFlag.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_JINLONG_CONTROL_MODEFLAG_H
#define CONTROL_MSGS_MESSAGE_JINLONG_CONTROL_MODEFLAG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct Jinlong_Control_ModeFlag_
{
  typedef Jinlong_Control_ModeFlag_<ContainerAllocator> Type;

  Jinlong_Control_ModeFlag_()
    : header()
    , auto_start_flag(0)
    , strg_workmode(0)
    , current_light_status(0)
    , vehicle_current_gear(0)
    , longitude_control_mode(0)
    , Auto_mode(0)
    , sts_auto(0)  {
    }
  Jinlong_Control_ModeFlag_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , auto_start_flag(0)
    , strg_workmode(0)
    , current_light_status(0)
    , vehicle_current_gear(0)
    , longitude_control_mode(0)
    , Auto_mode(0)
    , sts_auto(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _auto_start_flag_type;
  _auto_start_flag_type auto_start_flag;

   typedef int16_t _strg_workmode_type;
  _strg_workmode_type strg_workmode;

   typedef int16_t _current_light_status_type;
  _current_light_status_type current_light_status;

   typedef int16_t _vehicle_current_gear_type;
  _vehicle_current_gear_type vehicle_current_gear;

   typedef int16_t _longitude_control_mode_type;
  _longitude_control_mode_type longitude_control_mode;

   typedef int16_t _Auto_mode_type;
  _Auto_mode_type Auto_mode;

   typedef int16_t _sts_auto_type;
  _sts_auto_type sts_auto;





  typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> const> ConstPtr;

}; // struct Jinlong_Control_ModeFlag_

typedef ::control_msgs::Jinlong_Control_ModeFlag_<std::allocator<void> > Jinlong_Control_ModeFlag;

typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_ModeFlag > Jinlong_Control_ModeFlagPtr;
typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_ModeFlag const> Jinlong_Control_ModeFlagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator1> & lhs, const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.auto_start_flag == rhs.auto_start_flag &&
    lhs.strg_workmode == rhs.strg_workmode &&
    lhs.current_light_status == rhs.current_light_status &&
    lhs.vehicle_current_gear == rhs.vehicle_current_gear &&
    lhs.longitude_control_mode == rhs.longitude_control_mode &&
    lhs.Auto_mode == rhs.Auto_mode &&
    lhs.sts_auto == rhs.sts_auto;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator1> & lhs, const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f57bef070f30fd8c04852fe83448d3f9";
  }

  static const char* value(const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf57bef070f30fd8cULL;
  static const uint64_t static_value2 = 0x04852fe83448d3f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/Jinlong_Control_ModeFlag";
  }

  static const char* value(const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16 auto_start_flag\n"
"int16 strg_workmode\n"
"int16 current_light_status\n"
"int16 vehicle_current_gear\n"
"int16 longitude_control_mode\n"
"int16 Auto_mode\n"
"int16 sts_auto\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.auto_start_flag);
      stream.next(m.strg_workmode);
      stream.next(m.current_light_status);
      stream.next(m.vehicle_current_gear);
      stream.next(m.longitude_control_mode);
      stream.next(m.Auto_mode);
      stream.next(m.sts_auto);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Jinlong_Control_ModeFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::Jinlong_Control_ModeFlag_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "auto_start_flag: ";
    Printer<int16_t>::stream(s, indent + "  ", v.auto_start_flag);
    s << indent << "strg_workmode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.strg_workmode);
    s << indent << "current_light_status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current_light_status);
    s << indent << "vehicle_current_gear: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vehicle_current_gear);
    s << indent << "longitude_control_mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.longitude_control_mode);
    s << indent << "Auto_mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Auto_mode);
    s << indent << "sts_auto: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sts_auto);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_JINLONG_CONTROL_MODEFLAG_H
