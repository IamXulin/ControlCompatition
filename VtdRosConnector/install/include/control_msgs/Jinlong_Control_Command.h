// Generated by gencpp from file control_msgs/Jinlong_Control_Command.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_JINLONG_CONTROL_COMMAND_H
#define CONTROL_MSGS_MESSAGE_JINLONG_CONTROL_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct Jinlong_Control_Command_
{
  typedef Jinlong_Control_Command_<ContainerAllocator> Type;

  Jinlong_Control_Command_()
    : header()
    , AS_Strg_Angle_Req(0.0)
    , AS_Strg_WorkMode_Req(0)
    , AS_Strg0_Enable(0)
    , AS_Steering_torque_superposition(0.0)
    , AS_Strg_Spd_Req(0.0)
    , AS_Strg1_Enable(0)
    , AS_Strg_Life_Signal(0)
    , AS_AutoD_Req(0)
    , AS_Longit_Ctrlmode(0)
    , AS_AutoD_EmergBrk_Release(0)
    , AS_AutoD_Collision_Release(0)
    , AS_AutoD_Accel_Pos_Req(0.0)
    , AS_AutoD_Shift_Req(0)
    , AS_AutoD_P_Shift_Req(0)
    , AS_AutoD_BrkMode_Req(0)
    , AS_AutoD_BrkPelPos_Req(0.0)
    , AS_AutoD_Spd_Limit(0.0)
    , AS_Auto_Acceleration_Req(0.0)
    , AS_AutoD_Life_Signal(0)
    , AS_AutoD_Spd_Req(0.0)
    , AS_Spd_Life_Signal(0)
    , AS_AlarmLamp_Req(0)
    , AS_Front_Door_Ctrl_Req(0)
    , AS_LowBeam_Start_Req(0)
    , AS_TurnLeftLight_Start_Req(0)
    , AS_TurnRightLight_Start_Req(0)
    , AS_MiniLight_Start_Req(0)
    , AS_Horn_Start_Req(0)
    , AS_Treadle_Operating_Req(0)
    , AS_FDoorButtonLock_Req(0)
    , AS_Mid_Door_Ctrl_Req(0)
    , AS_MDoorButtonLock_Req(0)
    , AS_Rear_Door_Ctrl_Req(0)
    , AS_RDoorButtonLock_Req(0)
    , AS_FrontFog_Req(0)
    , AS_RearFog_Req(0)
    , AS_Warninglight_Req(0)
    , AS_HighBeam_Start_Req(0)
    , target_x(0.0)
    , target_y(0.0)
    , velocity(0.0)
    , auto_mode(0)  {
    }
  Jinlong_Control_Command_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , AS_Strg_Angle_Req(0.0)
    , AS_Strg_WorkMode_Req(0)
    , AS_Strg0_Enable(0)
    , AS_Steering_torque_superposition(0.0)
    , AS_Strg_Spd_Req(0.0)
    , AS_Strg1_Enable(0)
    , AS_Strg_Life_Signal(0)
    , AS_AutoD_Req(0)
    , AS_Longit_Ctrlmode(0)
    , AS_AutoD_EmergBrk_Release(0)
    , AS_AutoD_Collision_Release(0)
    , AS_AutoD_Accel_Pos_Req(0.0)
    , AS_AutoD_Shift_Req(0)
    , AS_AutoD_P_Shift_Req(0)
    , AS_AutoD_BrkMode_Req(0)
    , AS_AutoD_BrkPelPos_Req(0.0)
    , AS_AutoD_Spd_Limit(0.0)
    , AS_Auto_Acceleration_Req(0.0)
    , AS_AutoD_Life_Signal(0)
    , AS_AutoD_Spd_Req(0.0)
    , AS_Spd_Life_Signal(0)
    , AS_AlarmLamp_Req(0)
    , AS_Front_Door_Ctrl_Req(0)
    , AS_LowBeam_Start_Req(0)
    , AS_TurnLeftLight_Start_Req(0)
    , AS_TurnRightLight_Start_Req(0)
    , AS_MiniLight_Start_Req(0)
    , AS_Horn_Start_Req(0)
    , AS_Treadle_Operating_Req(0)
    , AS_FDoorButtonLock_Req(0)
    , AS_Mid_Door_Ctrl_Req(0)
    , AS_MDoorButtonLock_Req(0)
    , AS_Rear_Door_Ctrl_Req(0)
    , AS_RDoorButtonLock_Req(0)
    , AS_FrontFog_Req(0)
    , AS_RearFog_Req(0)
    , AS_Warninglight_Req(0)
    , AS_HighBeam_Start_Req(0)
    , target_x(0.0)
    , target_y(0.0)
    , velocity(0.0)
    , auto_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _AS_Strg_Angle_Req_type;
  _AS_Strg_Angle_Req_type AS_Strg_Angle_Req;

   typedef int16_t _AS_Strg_WorkMode_Req_type;
  _AS_Strg_WorkMode_Req_type AS_Strg_WorkMode_Req;

   typedef int16_t _AS_Strg0_Enable_type;
  _AS_Strg0_Enable_type AS_Strg0_Enable;

   typedef double _AS_Steering_torque_superposition_type;
  _AS_Steering_torque_superposition_type AS_Steering_torque_superposition;

   typedef double _AS_Strg_Spd_Req_type;
  _AS_Strg_Spd_Req_type AS_Strg_Spd_Req;

   typedef int16_t _AS_Strg1_Enable_type;
  _AS_Strg1_Enable_type AS_Strg1_Enable;

   typedef int16_t _AS_Strg_Life_Signal_type;
  _AS_Strg_Life_Signal_type AS_Strg_Life_Signal;

   typedef int16_t _AS_AutoD_Req_type;
  _AS_AutoD_Req_type AS_AutoD_Req;

   typedef int16_t _AS_Longit_Ctrlmode_type;
  _AS_Longit_Ctrlmode_type AS_Longit_Ctrlmode;

   typedef int16_t _AS_AutoD_EmergBrk_Release_type;
  _AS_AutoD_EmergBrk_Release_type AS_AutoD_EmergBrk_Release;

   typedef int16_t _AS_AutoD_Collision_Release_type;
  _AS_AutoD_Collision_Release_type AS_AutoD_Collision_Release;

   typedef double _AS_AutoD_Accel_Pos_Req_type;
  _AS_AutoD_Accel_Pos_Req_type AS_AutoD_Accel_Pos_Req;

   typedef int16_t _AS_AutoD_Shift_Req_type;
  _AS_AutoD_Shift_Req_type AS_AutoD_Shift_Req;

   typedef int16_t _AS_AutoD_P_Shift_Req_type;
  _AS_AutoD_P_Shift_Req_type AS_AutoD_P_Shift_Req;

   typedef int16_t _AS_AutoD_BrkMode_Req_type;
  _AS_AutoD_BrkMode_Req_type AS_AutoD_BrkMode_Req;

   typedef double _AS_AutoD_BrkPelPos_Req_type;
  _AS_AutoD_BrkPelPos_Req_type AS_AutoD_BrkPelPos_Req;

   typedef double _AS_AutoD_Spd_Limit_type;
  _AS_AutoD_Spd_Limit_type AS_AutoD_Spd_Limit;

   typedef double _AS_Auto_Acceleration_Req_type;
  _AS_Auto_Acceleration_Req_type AS_Auto_Acceleration_Req;

   typedef int16_t _AS_AutoD_Life_Signal_type;
  _AS_AutoD_Life_Signal_type AS_AutoD_Life_Signal;

   typedef double _AS_AutoD_Spd_Req_type;
  _AS_AutoD_Spd_Req_type AS_AutoD_Spd_Req;

   typedef int16_t _AS_Spd_Life_Signal_type;
  _AS_Spd_Life_Signal_type AS_Spd_Life_Signal;

   typedef int16_t _AS_AlarmLamp_Req_type;
  _AS_AlarmLamp_Req_type AS_AlarmLamp_Req;

   typedef int16_t _AS_Front_Door_Ctrl_Req_type;
  _AS_Front_Door_Ctrl_Req_type AS_Front_Door_Ctrl_Req;

   typedef int16_t _AS_LowBeam_Start_Req_type;
  _AS_LowBeam_Start_Req_type AS_LowBeam_Start_Req;

   typedef int16_t _AS_TurnLeftLight_Start_Req_type;
  _AS_TurnLeftLight_Start_Req_type AS_TurnLeftLight_Start_Req;

   typedef int16_t _AS_TurnRightLight_Start_Req_type;
  _AS_TurnRightLight_Start_Req_type AS_TurnRightLight_Start_Req;

   typedef int16_t _AS_MiniLight_Start_Req_type;
  _AS_MiniLight_Start_Req_type AS_MiniLight_Start_Req;

   typedef int16_t _AS_Horn_Start_Req_type;
  _AS_Horn_Start_Req_type AS_Horn_Start_Req;

   typedef int16_t _AS_Treadle_Operating_Req_type;
  _AS_Treadle_Operating_Req_type AS_Treadle_Operating_Req;

   typedef int16_t _AS_FDoorButtonLock_Req_type;
  _AS_FDoorButtonLock_Req_type AS_FDoorButtonLock_Req;

   typedef int16_t _AS_Mid_Door_Ctrl_Req_type;
  _AS_Mid_Door_Ctrl_Req_type AS_Mid_Door_Ctrl_Req;

   typedef int16_t _AS_MDoorButtonLock_Req_type;
  _AS_MDoorButtonLock_Req_type AS_MDoorButtonLock_Req;

   typedef int16_t _AS_Rear_Door_Ctrl_Req_type;
  _AS_Rear_Door_Ctrl_Req_type AS_Rear_Door_Ctrl_Req;

   typedef int16_t _AS_RDoorButtonLock_Req_type;
  _AS_RDoorButtonLock_Req_type AS_RDoorButtonLock_Req;

   typedef int16_t _AS_FrontFog_Req_type;
  _AS_FrontFog_Req_type AS_FrontFog_Req;

   typedef int16_t _AS_RearFog_Req_type;
  _AS_RearFog_Req_type AS_RearFog_Req;

   typedef int16_t _AS_Warninglight_Req_type;
  _AS_Warninglight_Req_type AS_Warninglight_Req;

   typedef int16_t _AS_HighBeam_Start_Req_type;
  _AS_HighBeam_Start_Req_type AS_HighBeam_Start_Req;

   typedef double _target_x_type;
  _target_x_type target_x;

   typedef double _target_y_type;
  _target_y_type target_y;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef int16_t _auto_mode_type;
  _auto_mode_type auto_mode;





  typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> const> ConstPtr;

}; // struct Jinlong_Control_Command_

typedef ::control_msgs::Jinlong_Control_Command_<std::allocator<void> > Jinlong_Control_Command;

typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_Command > Jinlong_Control_CommandPtr;
typedef boost::shared_ptr< ::control_msgs::Jinlong_Control_Command const> Jinlong_Control_CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator1> & lhs, const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.AS_Strg_Angle_Req == rhs.AS_Strg_Angle_Req &&
    lhs.AS_Strg_WorkMode_Req == rhs.AS_Strg_WorkMode_Req &&
    lhs.AS_Strg0_Enable == rhs.AS_Strg0_Enable &&
    lhs.AS_Steering_torque_superposition == rhs.AS_Steering_torque_superposition &&
    lhs.AS_Strg_Spd_Req == rhs.AS_Strg_Spd_Req &&
    lhs.AS_Strg1_Enable == rhs.AS_Strg1_Enable &&
    lhs.AS_Strg_Life_Signal == rhs.AS_Strg_Life_Signal &&
    lhs.AS_AutoD_Req == rhs.AS_AutoD_Req &&
    lhs.AS_Longit_Ctrlmode == rhs.AS_Longit_Ctrlmode &&
    lhs.AS_AutoD_EmergBrk_Release == rhs.AS_AutoD_EmergBrk_Release &&
    lhs.AS_AutoD_Collision_Release == rhs.AS_AutoD_Collision_Release &&
    lhs.AS_AutoD_Accel_Pos_Req == rhs.AS_AutoD_Accel_Pos_Req &&
    lhs.AS_AutoD_Shift_Req == rhs.AS_AutoD_Shift_Req &&
    lhs.AS_AutoD_P_Shift_Req == rhs.AS_AutoD_P_Shift_Req &&
    lhs.AS_AutoD_BrkMode_Req == rhs.AS_AutoD_BrkMode_Req &&
    lhs.AS_AutoD_BrkPelPos_Req == rhs.AS_AutoD_BrkPelPos_Req &&
    lhs.AS_AutoD_Spd_Limit == rhs.AS_AutoD_Spd_Limit &&
    lhs.AS_Auto_Acceleration_Req == rhs.AS_Auto_Acceleration_Req &&
    lhs.AS_AutoD_Life_Signal == rhs.AS_AutoD_Life_Signal &&
    lhs.AS_AutoD_Spd_Req == rhs.AS_AutoD_Spd_Req &&
    lhs.AS_Spd_Life_Signal == rhs.AS_Spd_Life_Signal &&
    lhs.AS_AlarmLamp_Req == rhs.AS_AlarmLamp_Req &&
    lhs.AS_Front_Door_Ctrl_Req == rhs.AS_Front_Door_Ctrl_Req &&
    lhs.AS_LowBeam_Start_Req == rhs.AS_LowBeam_Start_Req &&
    lhs.AS_TurnLeftLight_Start_Req == rhs.AS_TurnLeftLight_Start_Req &&
    lhs.AS_TurnRightLight_Start_Req == rhs.AS_TurnRightLight_Start_Req &&
    lhs.AS_MiniLight_Start_Req == rhs.AS_MiniLight_Start_Req &&
    lhs.AS_Horn_Start_Req == rhs.AS_Horn_Start_Req &&
    lhs.AS_Treadle_Operating_Req == rhs.AS_Treadle_Operating_Req &&
    lhs.AS_FDoorButtonLock_Req == rhs.AS_FDoorButtonLock_Req &&
    lhs.AS_Mid_Door_Ctrl_Req == rhs.AS_Mid_Door_Ctrl_Req &&
    lhs.AS_MDoorButtonLock_Req == rhs.AS_MDoorButtonLock_Req &&
    lhs.AS_Rear_Door_Ctrl_Req == rhs.AS_Rear_Door_Ctrl_Req &&
    lhs.AS_RDoorButtonLock_Req == rhs.AS_RDoorButtonLock_Req &&
    lhs.AS_FrontFog_Req == rhs.AS_FrontFog_Req &&
    lhs.AS_RearFog_Req == rhs.AS_RearFog_Req &&
    lhs.AS_Warninglight_Req == rhs.AS_Warninglight_Req &&
    lhs.AS_HighBeam_Start_Req == rhs.AS_HighBeam_Start_Req &&
    lhs.target_x == rhs.target_x &&
    lhs.target_y == rhs.target_y &&
    lhs.velocity == rhs.velocity &&
    lhs.auto_mode == rhs.auto_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator1> & lhs, const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6757555019b93a1c4e305c20acbe389";
  }

  static const char* value(const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6757555019b93a1ULL;
  static const uint64_t static_value2 = 0xc4e305c20acbe389ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/Jinlong_Control_Command";
  }

  static const char* value(const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"#121\n"
"float64 AS_Strg_Angle_Req                  #方向盘转向角度控制\n"
"int16 AS_Strg_WorkMode_Req               #工作模式指令\n"
"int16 AS_Strg0_Enable                    #0 号转向控制使能\n"
"float64 AS_Steering_torque_superposition   #转向叠加扭矩控制\n"
"float64 AS_Strg_Spd_Req                    #方向盘目标角速度\n"
"int16 AS_Strg1_Enable                    #1 号转向控制使能\n"
"int16 AS_Strg_Life_Signal                #整车控制器生命帧\n"
"#122\n"
"int16 AS_AutoD_Req                       #自动驾驶启动请求信号\n"
"int16 AS_Longit_Ctrlmode                 #车端纵向控制模式\n"
"int16 AS_AutoD_EmergBrk_Release          #紧急制动解除\n"
"int16 AS_AutoD_Collision_Release         #碰撞制动解除信号\n"
"float64 AS_AutoD_Accel_Pos_Req             #模拟加速踏板位置\n"
"int16 AS_AutoD_Shift_Req                 #档位请求\n"
"int16 AS_AutoD_P_Shift_Req               #P档位请求\n"
"int16 AS_AutoD_BrkMode_Req               #当前制动系统应用类型\n"
"float64 AS_AutoD_BrkPelPos_Req             #模拟制动踏板位置\n"
"float64 AS_AutoD_Spd_Limit                 #自动驾驶车辆限速\n"
"float64 AS_Auto_Acceleration_Req           #加减速度需求\n"
"int16 AS_AutoD_Life_Signal               #life 生命脉动\n"
"#123\n"
"float64 AS_AutoD_Spd_Req                   #自动驾驶车速请求【此条指令没有】\n"
"int16 AS_Spd_Life_Signal                 #life 生命脉动【此条指令没有】\n"
"#2B8\n"
"int16 AS_AlarmLamp_Req                   #警灯请求\n"
"int16 AS_Front_Door_Ctrl_Req             #前门控制请求\n"
"int16 AS_LowBeam_Start_Req               #近光灯开启请求\n"
"int16 AS_TurnLeftLight_Start_Req         #左转向灯开启请求\n"
"int16 AS_TurnRightLight_Start_Req        #右转向灯开启请求\n"
"int16 AS_MiniLight_Start_Req             #小灯开启请求\n"
"int16 AS_Horn_Start_Req                  #喇叭开启请求\n"
"int16 AS_Treadle_Operating_Req           #残疾人踏板操作请求\n"
"int16 AS_FDoorButtonLock_Req             #前门按键控制锁止功能\n"
"int16 AS_Mid_Door_Ctrl_Req               #中门控制请求\n"
"int16 AS_MDoorButtonLock_Req             #中门按键控制锁止功能\n"
"int16 AS_Rear_Door_Ctrl_Req              #后门控制请求\n"
"int16 AS_RDoorButtonLock_Req             #后门按键控制锁止功能\n"
"int16 AS_FrontFog_Req                    #前雾灯开启请求\n"
"int16 AS_RearFog_Req                     #后雾灯开启请求\n"
"int16 AS_Warninglight_Req                #危险报警闪光灯开启请求\n"
"int16 AS_HighBeam_Start_Req              #远光灯开启请求\n"
"#target point and velocity\n"
"float64 target_x\n"
"float64 target_y\n"
"float64 velocity\n"
"int16 auto_mode\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.AS_Strg_Angle_Req);
      stream.next(m.AS_Strg_WorkMode_Req);
      stream.next(m.AS_Strg0_Enable);
      stream.next(m.AS_Steering_torque_superposition);
      stream.next(m.AS_Strg_Spd_Req);
      stream.next(m.AS_Strg1_Enable);
      stream.next(m.AS_Strg_Life_Signal);
      stream.next(m.AS_AutoD_Req);
      stream.next(m.AS_Longit_Ctrlmode);
      stream.next(m.AS_AutoD_EmergBrk_Release);
      stream.next(m.AS_AutoD_Collision_Release);
      stream.next(m.AS_AutoD_Accel_Pos_Req);
      stream.next(m.AS_AutoD_Shift_Req);
      stream.next(m.AS_AutoD_P_Shift_Req);
      stream.next(m.AS_AutoD_BrkMode_Req);
      stream.next(m.AS_AutoD_BrkPelPos_Req);
      stream.next(m.AS_AutoD_Spd_Limit);
      stream.next(m.AS_Auto_Acceleration_Req);
      stream.next(m.AS_AutoD_Life_Signal);
      stream.next(m.AS_AutoD_Spd_Req);
      stream.next(m.AS_Spd_Life_Signal);
      stream.next(m.AS_AlarmLamp_Req);
      stream.next(m.AS_Front_Door_Ctrl_Req);
      stream.next(m.AS_LowBeam_Start_Req);
      stream.next(m.AS_TurnLeftLight_Start_Req);
      stream.next(m.AS_TurnRightLight_Start_Req);
      stream.next(m.AS_MiniLight_Start_Req);
      stream.next(m.AS_Horn_Start_Req);
      stream.next(m.AS_Treadle_Operating_Req);
      stream.next(m.AS_FDoorButtonLock_Req);
      stream.next(m.AS_Mid_Door_Ctrl_Req);
      stream.next(m.AS_MDoorButtonLock_Req);
      stream.next(m.AS_Rear_Door_Ctrl_Req);
      stream.next(m.AS_RDoorButtonLock_Req);
      stream.next(m.AS_FrontFog_Req);
      stream.next(m.AS_RearFog_Req);
      stream.next(m.AS_Warninglight_Req);
      stream.next(m.AS_HighBeam_Start_Req);
      stream.next(m.target_x);
      stream.next(m.target_y);
      stream.next(m.velocity);
      stream.next(m.auto_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Jinlong_Control_Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::Jinlong_Control_Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::Jinlong_Control_Command_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "AS_Strg_Angle_Req: ";
    Printer<double>::stream(s, indent + "  ", v.AS_Strg_Angle_Req);
    s << indent << "AS_Strg_WorkMode_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Strg_WorkMode_Req);
    s << indent << "AS_Strg0_Enable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Strg0_Enable);
    s << indent << "AS_Steering_torque_superposition: ";
    Printer<double>::stream(s, indent + "  ", v.AS_Steering_torque_superposition);
    s << indent << "AS_Strg_Spd_Req: ";
    Printer<double>::stream(s, indent + "  ", v.AS_Strg_Spd_Req);
    s << indent << "AS_Strg1_Enable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Strg1_Enable);
    s << indent << "AS_Strg_Life_Signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Strg_Life_Signal);
    s << indent << "AS_AutoD_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AutoD_Req);
    s << indent << "AS_Longit_Ctrlmode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Longit_Ctrlmode);
    s << indent << "AS_AutoD_EmergBrk_Release: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AutoD_EmergBrk_Release);
    s << indent << "AS_AutoD_Collision_Release: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AutoD_Collision_Release);
    s << indent << "AS_AutoD_Accel_Pos_Req: ";
    Printer<double>::stream(s, indent + "  ", v.AS_AutoD_Accel_Pos_Req);
    s << indent << "AS_AutoD_Shift_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AutoD_Shift_Req);
    s << indent << "AS_AutoD_P_Shift_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AutoD_P_Shift_Req);
    s << indent << "AS_AutoD_BrkMode_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AutoD_BrkMode_Req);
    s << indent << "AS_AutoD_BrkPelPos_Req: ";
    Printer<double>::stream(s, indent + "  ", v.AS_AutoD_BrkPelPos_Req);
    s << indent << "AS_AutoD_Spd_Limit: ";
    Printer<double>::stream(s, indent + "  ", v.AS_AutoD_Spd_Limit);
    s << indent << "AS_Auto_Acceleration_Req: ";
    Printer<double>::stream(s, indent + "  ", v.AS_Auto_Acceleration_Req);
    s << indent << "AS_AutoD_Life_Signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AutoD_Life_Signal);
    s << indent << "AS_AutoD_Spd_Req: ";
    Printer<double>::stream(s, indent + "  ", v.AS_AutoD_Spd_Req);
    s << indent << "AS_Spd_Life_Signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Spd_Life_Signal);
    s << indent << "AS_AlarmLamp_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_AlarmLamp_Req);
    s << indent << "AS_Front_Door_Ctrl_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Front_Door_Ctrl_Req);
    s << indent << "AS_LowBeam_Start_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_LowBeam_Start_Req);
    s << indent << "AS_TurnLeftLight_Start_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_TurnLeftLight_Start_Req);
    s << indent << "AS_TurnRightLight_Start_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_TurnRightLight_Start_Req);
    s << indent << "AS_MiniLight_Start_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_MiniLight_Start_Req);
    s << indent << "AS_Horn_Start_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Horn_Start_Req);
    s << indent << "AS_Treadle_Operating_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Treadle_Operating_Req);
    s << indent << "AS_FDoorButtonLock_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_FDoorButtonLock_Req);
    s << indent << "AS_Mid_Door_Ctrl_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Mid_Door_Ctrl_Req);
    s << indent << "AS_MDoorButtonLock_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_MDoorButtonLock_Req);
    s << indent << "AS_Rear_Door_Ctrl_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Rear_Door_Ctrl_Req);
    s << indent << "AS_RDoorButtonLock_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_RDoorButtonLock_Req);
    s << indent << "AS_FrontFog_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_FrontFog_Req);
    s << indent << "AS_RearFog_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_RearFog_Req);
    s << indent << "AS_Warninglight_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_Warninglight_Req);
    s << indent << "AS_HighBeam_Start_Req: ";
    Printer<int16_t>::stream(s, indent + "  ", v.AS_HighBeam_Start_Req);
    s << indent << "target_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_x);
    s << indent << "target_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_y);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "auto_mode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.auto_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_JINLONG_CONTROL_COMMAND_H
