// Generated by gencpp from file control_msgs/Control_Command.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_CONTROL_COMMAND_H
#define CONTROL_MSGS_MESSAGE_CONTROL_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct Control_Command_
{
  typedef Control_Command_<ContainerAllocator> Type;

  Control_Command_()
    : header()
    , Adas_BrakeEnable(0)
    , Adas_ControlMode(0)
    , Adas_DriveEnable(0)
    , Adas_GearEnable(0)
    , Adas_ParkEnable(0)
    , Adas_StringMode(0)
    , Adas_TargetBrakePret(0.0)
    , Adas_TargetMotTq(0.0)
    , Adas_TargetStringAngl(0.0)
    , Adas_TargetStringSpd(0.0)
    , Adas_F_FogLgtCmd(0)
    , Adas_FarLgtCmd(0)
    , Adas_HornCmd(0)
    , Adas_LampEnable(0)
    , Adas_NearLgtCmd(0)
    , Adas_NightLgtCmd(0)
    , Adas_R_FogLgtCmd(0)
    , Adas_TurnLgtCmd(0)
    , target_x(0.0)
    , target_y(0.0)
    , velocity(0.0)  {
    }
  Control_Command_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Adas_BrakeEnable(0)
    , Adas_ControlMode(0)
    , Adas_DriveEnable(0)
    , Adas_GearEnable(0)
    , Adas_ParkEnable(0)
    , Adas_StringMode(0)
    , Adas_TargetBrakePret(0.0)
    , Adas_TargetMotTq(0.0)
    , Adas_TargetStringAngl(0.0)
    , Adas_TargetStringSpd(0.0)
    , Adas_F_FogLgtCmd(0)
    , Adas_FarLgtCmd(0)
    , Adas_HornCmd(0)
    , Adas_LampEnable(0)
    , Adas_NearLgtCmd(0)
    , Adas_NightLgtCmd(0)
    , Adas_R_FogLgtCmd(0)
    , Adas_TurnLgtCmd(0)
    , target_x(0.0)
    , target_y(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _Adas_BrakeEnable_type;
  _Adas_BrakeEnable_type Adas_BrakeEnable;

   typedef int16_t _Adas_ControlMode_type;
  _Adas_ControlMode_type Adas_ControlMode;

   typedef int16_t _Adas_DriveEnable_type;
  _Adas_DriveEnable_type Adas_DriveEnable;

   typedef int16_t _Adas_GearEnable_type;
  _Adas_GearEnable_type Adas_GearEnable;

   typedef int16_t _Adas_ParkEnable_type;
  _Adas_ParkEnable_type Adas_ParkEnable;

   typedef int16_t _Adas_StringMode_type;
  _Adas_StringMode_type Adas_StringMode;

   typedef double _Adas_TargetBrakePret_type;
  _Adas_TargetBrakePret_type Adas_TargetBrakePret;

   typedef double _Adas_TargetMotTq_type;
  _Adas_TargetMotTq_type Adas_TargetMotTq;

   typedef double _Adas_TargetStringAngl_type;
  _Adas_TargetStringAngl_type Adas_TargetStringAngl;

   typedef double _Adas_TargetStringSpd_type;
  _Adas_TargetStringSpd_type Adas_TargetStringSpd;

   typedef int16_t _Adas_F_FogLgtCmd_type;
  _Adas_F_FogLgtCmd_type Adas_F_FogLgtCmd;

   typedef int16_t _Adas_FarLgtCmd_type;
  _Adas_FarLgtCmd_type Adas_FarLgtCmd;

   typedef int16_t _Adas_HornCmd_type;
  _Adas_HornCmd_type Adas_HornCmd;

   typedef int16_t _Adas_LampEnable_type;
  _Adas_LampEnable_type Adas_LampEnable;

   typedef int16_t _Adas_NearLgtCmd_type;
  _Adas_NearLgtCmd_type Adas_NearLgtCmd;

   typedef int16_t _Adas_NightLgtCmd_type;
  _Adas_NightLgtCmd_type Adas_NightLgtCmd;

   typedef int16_t _Adas_R_FogLgtCmd_type;
  _Adas_R_FogLgtCmd_type Adas_R_FogLgtCmd;

   typedef int16_t _Adas_TurnLgtCmd_type;
  _Adas_TurnLgtCmd_type Adas_TurnLgtCmd;

   typedef double _target_x_type;
  _target_x_type target_x;

   typedef double _target_y_type;
  _target_y_type target_y;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::control_msgs::Control_Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::Control_Command_<ContainerAllocator> const> ConstPtr;

}; // struct Control_Command_

typedef ::control_msgs::Control_Command_<std::allocator<void> > Control_Command;

typedef boost::shared_ptr< ::control_msgs::Control_Command > Control_CommandPtr;
typedef boost::shared_ptr< ::control_msgs::Control_Command const> Control_CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::Control_Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::Control_Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_msgs::Control_Command_<ContainerAllocator1> & lhs, const ::control_msgs::Control_Command_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Adas_BrakeEnable == rhs.Adas_BrakeEnable &&
    lhs.Adas_ControlMode == rhs.Adas_ControlMode &&
    lhs.Adas_DriveEnable == rhs.Adas_DriveEnable &&
    lhs.Adas_GearEnable == rhs.Adas_GearEnable &&
    lhs.Adas_ParkEnable == rhs.Adas_ParkEnable &&
    lhs.Adas_StringMode == rhs.Adas_StringMode &&
    lhs.Adas_TargetBrakePret == rhs.Adas_TargetBrakePret &&
    lhs.Adas_TargetMotTq == rhs.Adas_TargetMotTq &&
    lhs.Adas_TargetStringAngl == rhs.Adas_TargetStringAngl &&
    lhs.Adas_TargetStringSpd == rhs.Adas_TargetStringSpd &&
    lhs.Adas_F_FogLgtCmd == rhs.Adas_F_FogLgtCmd &&
    lhs.Adas_FarLgtCmd == rhs.Adas_FarLgtCmd &&
    lhs.Adas_HornCmd == rhs.Adas_HornCmd &&
    lhs.Adas_LampEnable == rhs.Adas_LampEnable &&
    lhs.Adas_NearLgtCmd == rhs.Adas_NearLgtCmd &&
    lhs.Adas_NightLgtCmd == rhs.Adas_NightLgtCmd &&
    lhs.Adas_R_FogLgtCmd == rhs.Adas_R_FogLgtCmd &&
    lhs.Adas_TurnLgtCmd == rhs.Adas_TurnLgtCmd &&
    lhs.target_x == rhs.target_x &&
    lhs.target_y == rhs.target_y &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_msgs::Control_Command_<ContainerAllocator1> & lhs, const ::control_msgs::Control_Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Control_Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::Control_Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Control_Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::Control_Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Control_Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::Control_Command_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::Control_Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f60f374299685d30b4c49cb3a4646200";
  }

  static const char* value(const ::control_msgs::Control_Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf60f374299685d30ULL;
  static const uint64_t static_value2 = 0xb4c49cb3a4646200ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::Control_Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/Control_Command";
  }

  static const char* value(const ::control_msgs::Control_Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::Control_Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16 Adas_BrakeEnable\n"
"int16 Adas_ControlMode\n"
"int16 Adas_DriveEnable\n"
"int16 Adas_GearEnable\n"
"int16 Adas_ParkEnable\n"
"int16 Adas_StringMode\n"
"float64 Adas_TargetBrakePret\n"
"float64 Adas_TargetMotTq\n"
"float64 Adas_TargetStringAngl\n"
"float64 Adas_TargetStringSpd\n"
"int16 Adas_F_FogLgtCmd\n"
"int16 Adas_FarLgtCmd\n"
"int16 Adas_HornCmd\n"
"int16 Adas_LampEnable\n"
"int16 Adas_NearLgtCmd\n"
"int16 Adas_NightLgtCmd\n"
"int16 Adas_R_FogLgtCmd\n"
"int16 Adas_TurnLgtCmd\n"
"float64 target_x\n"
"float64 target_y\n"
"float64 velocity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::control_msgs::Control_Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::Control_Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Adas_BrakeEnable);
      stream.next(m.Adas_ControlMode);
      stream.next(m.Adas_DriveEnable);
      stream.next(m.Adas_GearEnable);
      stream.next(m.Adas_ParkEnable);
      stream.next(m.Adas_StringMode);
      stream.next(m.Adas_TargetBrakePret);
      stream.next(m.Adas_TargetMotTq);
      stream.next(m.Adas_TargetStringAngl);
      stream.next(m.Adas_TargetStringSpd);
      stream.next(m.Adas_F_FogLgtCmd);
      stream.next(m.Adas_FarLgtCmd);
      stream.next(m.Adas_HornCmd);
      stream.next(m.Adas_LampEnable);
      stream.next(m.Adas_NearLgtCmd);
      stream.next(m.Adas_NightLgtCmd);
      stream.next(m.Adas_R_FogLgtCmd);
      stream.next(m.Adas_TurnLgtCmd);
      stream.next(m.target_x);
      stream.next(m.target_y);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::Control_Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::Control_Command_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Adas_BrakeEnable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_BrakeEnable);
    s << indent << "Adas_ControlMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_ControlMode);
    s << indent << "Adas_DriveEnable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_DriveEnable);
    s << indent << "Adas_GearEnable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_GearEnable);
    s << indent << "Adas_ParkEnable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_ParkEnable);
    s << indent << "Adas_StringMode: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_StringMode);
    s << indent << "Adas_TargetBrakePret: ";
    Printer<double>::stream(s, indent + "  ", v.Adas_TargetBrakePret);
    s << indent << "Adas_TargetMotTq: ";
    Printer<double>::stream(s, indent + "  ", v.Adas_TargetMotTq);
    s << indent << "Adas_TargetStringAngl: ";
    Printer<double>::stream(s, indent + "  ", v.Adas_TargetStringAngl);
    s << indent << "Adas_TargetStringSpd: ";
    Printer<double>::stream(s, indent + "  ", v.Adas_TargetStringSpd);
    s << indent << "Adas_F_FogLgtCmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_F_FogLgtCmd);
    s << indent << "Adas_FarLgtCmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_FarLgtCmd);
    s << indent << "Adas_HornCmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_HornCmd);
    s << indent << "Adas_LampEnable: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_LampEnable);
    s << indent << "Adas_NearLgtCmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_NearLgtCmd);
    s << indent << "Adas_NightLgtCmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_NightLgtCmd);
    s << indent << "Adas_R_FogLgtCmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_R_FogLgtCmd);
    s << indent << "Adas_TurnLgtCmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Adas_TurnLgtCmd);
    s << indent << "target_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_x);
    s << indent << "target_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_y);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_CONTROL_COMMAND_H
