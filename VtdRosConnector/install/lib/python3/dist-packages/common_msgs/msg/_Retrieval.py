# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from common_msgs/Retrieval.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Retrieval(genpy.Message):
  _md5sum = "65c84a13d17609ac38afeddca591500c"
  _type = "common_msgs/Retrieval"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float64 AS_Veh_Acceleration_Value        # 惯导采集到的加速度
int16 AS_Driver_TakeOver_Req             # 驾驶员接管提醒(2B9)
float64 VCU_Accel_Pos_Value              # 实际加速踏板位置
float64 VCU_BrkPel_Pos_Value             # 实际制动踏板位置
float64 VCU_Real_Speed                   # 当前车速
int16 VCU_Current_Gear                   # 当前档位
int16 VCU_Parking_St                     # 当前P档位
int16 AutoD_Limitin_Reason               # 限制进入自动驾驶原因
int16 Emergency_Stop_Reason              # 紧急停车激活原因
int16 VCU_Driver_TakeOver_Req            # 驾驶员接管提醒(2BA)
int16 VCU_Vehicle_Drive_Mode_St          # 车辆驾驶模式
int16 AutoD_Out_Reason                   # 退出自动驾驶原因
int16 Brak_Sys_Fault_St                  # 制动系统故障
float64 Strg_Angle_Real_Value            # 方向盘实际转角
float64 Strg_Angle_Spd_Value             # 方向盘当前实际速度反馈
int16 Strg_WorkMode_St                   # 当前系统实际工作模式
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','AS_Veh_Acceleration_Value','AS_Driver_TakeOver_Req','VCU_Accel_Pos_Value','VCU_BrkPel_Pos_Value','VCU_Real_Speed','VCU_Current_Gear','VCU_Parking_St','AutoD_Limitin_Reason','Emergency_Stop_Reason','VCU_Driver_TakeOver_Req','VCU_Vehicle_Drive_Mode_St','AutoD_Out_Reason','Brak_Sys_Fault_St','Strg_Angle_Real_Value','Strg_Angle_Spd_Value','Strg_WorkMode_St']
  _slot_types = ['std_msgs/Header','float64','int16','float64','float64','float64','int16','int16','int16','int16','int16','int16','int16','int16','float64','float64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,AS_Veh_Acceleration_Value,AS_Driver_TakeOver_Req,VCU_Accel_Pos_Value,VCU_BrkPel_Pos_Value,VCU_Real_Speed,VCU_Current_Gear,VCU_Parking_St,AutoD_Limitin_Reason,Emergency_Stop_Reason,VCU_Driver_TakeOver_Req,VCU_Vehicle_Drive_Mode_St,AutoD_Out_Reason,Brak_Sys_Fault_St,Strg_Angle_Real_Value,Strg_Angle_Spd_Value,Strg_WorkMode_St

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Retrieval, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.AS_Veh_Acceleration_Value is None:
        self.AS_Veh_Acceleration_Value = 0.
      if self.AS_Driver_TakeOver_Req is None:
        self.AS_Driver_TakeOver_Req = 0
      if self.VCU_Accel_Pos_Value is None:
        self.VCU_Accel_Pos_Value = 0.
      if self.VCU_BrkPel_Pos_Value is None:
        self.VCU_BrkPel_Pos_Value = 0.
      if self.VCU_Real_Speed is None:
        self.VCU_Real_Speed = 0.
      if self.VCU_Current_Gear is None:
        self.VCU_Current_Gear = 0
      if self.VCU_Parking_St is None:
        self.VCU_Parking_St = 0
      if self.AutoD_Limitin_Reason is None:
        self.AutoD_Limitin_Reason = 0
      if self.Emergency_Stop_Reason is None:
        self.Emergency_Stop_Reason = 0
      if self.VCU_Driver_TakeOver_Req is None:
        self.VCU_Driver_TakeOver_Req = 0
      if self.VCU_Vehicle_Drive_Mode_St is None:
        self.VCU_Vehicle_Drive_Mode_St = 0
      if self.AutoD_Out_Reason is None:
        self.AutoD_Out_Reason = 0
      if self.Brak_Sys_Fault_St is None:
        self.Brak_Sys_Fault_St = 0
      if self.Strg_Angle_Real_Value is None:
        self.Strg_Angle_Real_Value = 0.
      if self.Strg_Angle_Spd_Value is None:
        self.Strg_Angle_Spd_Value = 0.
      if self.Strg_WorkMode_St is None:
        self.Strg_WorkMode_St = 0
    else:
      self.header = std_msgs.msg.Header()
      self.AS_Veh_Acceleration_Value = 0.
      self.AS_Driver_TakeOver_Req = 0
      self.VCU_Accel_Pos_Value = 0.
      self.VCU_BrkPel_Pos_Value = 0.
      self.VCU_Real_Speed = 0.
      self.VCU_Current_Gear = 0
      self.VCU_Parking_St = 0
      self.AutoD_Limitin_Reason = 0
      self.Emergency_Stop_Reason = 0
      self.VCU_Driver_TakeOver_Req = 0
      self.VCU_Vehicle_Drive_Mode_St = 0
      self.AutoD_Out_Reason = 0
      self.Brak_Sys_Fault_St = 0
      self.Strg_Angle_Real_Value = 0.
      self.Strg_Angle_Spd_Value = 0.
      self.Strg_WorkMode_St = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dh3d8h2dh().pack(_x.AS_Veh_Acceleration_Value, _x.AS_Driver_TakeOver_Req, _x.VCU_Accel_Pos_Value, _x.VCU_BrkPel_Pos_Value, _x.VCU_Real_Speed, _x.VCU_Current_Gear, _x.VCU_Parking_St, _x.AutoD_Limitin_Reason, _x.Emergency_Stop_Reason, _x.VCU_Driver_TakeOver_Req, _x.VCU_Vehicle_Drive_Mode_St, _x.AutoD_Out_Reason, _x.Brak_Sys_Fault_St, _x.Strg_Angle_Real_Value, _x.Strg_Angle_Spd_Value, _x.Strg_WorkMode_St))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.AS_Veh_Acceleration_Value, _x.AS_Driver_TakeOver_Req, _x.VCU_Accel_Pos_Value, _x.VCU_BrkPel_Pos_Value, _x.VCU_Real_Speed, _x.VCU_Current_Gear, _x.VCU_Parking_St, _x.AutoD_Limitin_Reason, _x.Emergency_Stop_Reason, _x.VCU_Driver_TakeOver_Req, _x.VCU_Vehicle_Drive_Mode_St, _x.AutoD_Out_Reason, _x.Brak_Sys_Fault_St, _x.Strg_Angle_Real_Value, _x.Strg_Angle_Spd_Value, _x.Strg_WorkMode_St,) = _get_struct_dh3d8h2dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dh3d8h2dh().pack(_x.AS_Veh_Acceleration_Value, _x.AS_Driver_TakeOver_Req, _x.VCU_Accel_Pos_Value, _x.VCU_BrkPel_Pos_Value, _x.VCU_Real_Speed, _x.VCU_Current_Gear, _x.VCU_Parking_St, _x.AutoD_Limitin_Reason, _x.Emergency_Stop_Reason, _x.VCU_Driver_TakeOver_Req, _x.VCU_Vehicle_Drive_Mode_St, _x.AutoD_Out_Reason, _x.Brak_Sys_Fault_St, _x.Strg_Angle_Real_Value, _x.Strg_Angle_Spd_Value, _x.Strg_WorkMode_St))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.AS_Veh_Acceleration_Value, _x.AS_Driver_TakeOver_Req, _x.VCU_Accel_Pos_Value, _x.VCU_BrkPel_Pos_Value, _x.VCU_Real_Speed, _x.VCU_Current_Gear, _x.VCU_Parking_St, _x.AutoD_Limitin_Reason, _x.Emergency_Stop_Reason, _x.VCU_Driver_TakeOver_Req, _x.VCU_Vehicle_Drive_Mode_St, _x.AutoD_Out_Reason, _x.Brak_Sys_Fault_St, _x.Strg_Angle_Real_Value, _x.Strg_Angle_Spd_Value, _x.Strg_WorkMode_St,) = _get_struct_dh3d8h2dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_dh3d8h2dh = None
def _get_struct_dh3d8h2dh():
    global _struct_dh3d8h2dh
    if _struct_dh3d8h2dh is None:
        _struct_dh3d8h2dh = struct.Struct("<dh3d8h2dh")
    return _struct_dh3d8h2dh
