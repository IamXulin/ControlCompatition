# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_msgs/Jinlong_Control_Command.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Jinlong_Control_Command(genpy.Message):
  _md5sum = "e6757555019b93a1c4e305c20acbe389"
  _type = "control_msgs/Jinlong_Control_Command"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
#121
float64 AS_Strg_Angle_Req                  #方向盘转向角度控制
int16 AS_Strg_WorkMode_Req               #工作模式指令
int16 AS_Strg0_Enable                    #0 号转向控制使能
float64 AS_Steering_torque_superposition   #转向叠加扭矩控制
float64 AS_Strg_Spd_Req                    #方向盘目标角速度
int16 AS_Strg1_Enable                    #1 号转向控制使能
int16 AS_Strg_Life_Signal                #整车控制器生命帧
#122
int16 AS_AutoD_Req                       #自动驾驶启动请求信号
int16 AS_Longit_Ctrlmode                 #车端纵向控制模式
int16 AS_AutoD_EmergBrk_Release          #紧急制动解除
int16 AS_AutoD_Collision_Release         #碰撞制动解除信号
float64 AS_AutoD_Accel_Pos_Req             #模拟加速踏板位置
int16 AS_AutoD_Shift_Req                 #档位请求
int16 AS_AutoD_P_Shift_Req               #P档位请求
int16 AS_AutoD_BrkMode_Req               #当前制动系统应用类型
float64 AS_AutoD_BrkPelPos_Req             #模拟制动踏板位置
float64 AS_AutoD_Spd_Limit                 #自动驾驶车辆限速
float64 AS_Auto_Acceleration_Req           #加减速度需求
int16 AS_AutoD_Life_Signal               #life 生命脉动
#123
float64 AS_AutoD_Spd_Req                   #自动驾驶车速请求【此条指令没有】
int16 AS_Spd_Life_Signal                 #life 生命脉动【此条指令没有】
#2B8
int16 AS_AlarmLamp_Req                   #警灯请求
int16 AS_Front_Door_Ctrl_Req             #前门控制请求
int16 AS_LowBeam_Start_Req               #近光灯开启请求
int16 AS_TurnLeftLight_Start_Req         #左转向灯开启请求
int16 AS_TurnRightLight_Start_Req        #右转向灯开启请求
int16 AS_MiniLight_Start_Req             #小灯开启请求
int16 AS_Horn_Start_Req                  #喇叭开启请求
int16 AS_Treadle_Operating_Req           #残疾人踏板操作请求
int16 AS_FDoorButtonLock_Req             #前门按键控制锁止功能
int16 AS_Mid_Door_Ctrl_Req               #中门控制请求
int16 AS_MDoorButtonLock_Req             #中门按键控制锁止功能
int16 AS_Rear_Door_Ctrl_Req              #后门控制请求
int16 AS_RDoorButtonLock_Req             #后门按键控制锁止功能
int16 AS_FrontFog_Req                    #前雾灯开启请求
int16 AS_RearFog_Req                     #后雾灯开启请求
int16 AS_Warninglight_Req                #危险报警闪光灯开启请求
int16 AS_HighBeam_Start_Req              #远光灯开启请求
#target point and velocity
float64 target_x
float64 target_y
float64 velocity
int16 auto_mode
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','AS_Strg_Angle_Req','AS_Strg_WorkMode_Req','AS_Strg0_Enable','AS_Steering_torque_superposition','AS_Strg_Spd_Req','AS_Strg1_Enable','AS_Strg_Life_Signal','AS_AutoD_Req','AS_Longit_Ctrlmode','AS_AutoD_EmergBrk_Release','AS_AutoD_Collision_Release','AS_AutoD_Accel_Pos_Req','AS_AutoD_Shift_Req','AS_AutoD_P_Shift_Req','AS_AutoD_BrkMode_Req','AS_AutoD_BrkPelPos_Req','AS_AutoD_Spd_Limit','AS_Auto_Acceleration_Req','AS_AutoD_Life_Signal','AS_AutoD_Spd_Req','AS_Spd_Life_Signal','AS_AlarmLamp_Req','AS_Front_Door_Ctrl_Req','AS_LowBeam_Start_Req','AS_TurnLeftLight_Start_Req','AS_TurnRightLight_Start_Req','AS_MiniLight_Start_Req','AS_Horn_Start_Req','AS_Treadle_Operating_Req','AS_FDoorButtonLock_Req','AS_Mid_Door_Ctrl_Req','AS_MDoorButtonLock_Req','AS_Rear_Door_Ctrl_Req','AS_RDoorButtonLock_Req','AS_FrontFog_Req','AS_RearFog_Req','AS_Warninglight_Req','AS_HighBeam_Start_Req','target_x','target_y','velocity','auto_mode']
  _slot_types = ['std_msgs/Header','float64','int16','int16','float64','float64','int16','int16','int16','int16','int16','int16','float64','int16','int16','int16','float64','float64','float64','int16','float64','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','float64','float64','float64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,AS_Strg_Angle_Req,AS_Strg_WorkMode_Req,AS_Strg0_Enable,AS_Steering_torque_superposition,AS_Strg_Spd_Req,AS_Strg1_Enable,AS_Strg_Life_Signal,AS_AutoD_Req,AS_Longit_Ctrlmode,AS_AutoD_EmergBrk_Release,AS_AutoD_Collision_Release,AS_AutoD_Accel_Pos_Req,AS_AutoD_Shift_Req,AS_AutoD_P_Shift_Req,AS_AutoD_BrkMode_Req,AS_AutoD_BrkPelPos_Req,AS_AutoD_Spd_Limit,AS_Auto_Acceleration_Req,AS_AutoD_Life_Signal,AS_AutoD_Spd_Req,AS_Spd_Life_Signal,AS_AlarmLamp_Req,AS_Front_Door_Ctrl_Req,AS_LowBeam_Start_Req,AS_TurnLeftLight_Start_Req,AS_TurnRightLight_Start_Req,AS_MiniLight_Start_Req,AS_Horn_Start_Req,AS_Treadle_Operating_Req,AS_FDoorButtonLock_Req,AS_Mid_Door_Ctrl_Req,AS_MDoorButtonLock_Req,AS_Rear_Door_Ctrl_Req,AS_RDoorButtonLock_Req,AS_FrontFog_Req,AS_RearFog_Req,AS_Warninglight_Req,AS_HighBeam_Start_Req,target_x,target_y,velocity,auto_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Jinlong_Control_Command, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.AS_Strg_Angle_Req is None:
        self.AS_Strg_Angle_Req = 0.
      if self.AS_Strg_WorkMode_Req is None:
        self.AS_Strg_WorkMode_Req = 0
      if self.AS_Strg0_Enable is None:
        self.AS_Strg0_Enable = 0
      if self.AS_Steering_torque_superposition is None:
        self.AS_Steering_torque_superposition = 0.
      if self.AS_Strg_Spd_Req is None:
        self.AS_Strg_Spd_Req = 0.
      if self.AS_Strg1_Enable is None:
        self.AS_Strg1_Enable = 0
      if self.AS_Strg_Life_Signal is None:
        self.AS_Strg_Life_Signal = 0
      if self.AS_AutoD_Req is None:
        self.AS_AutoD_Req = 0
      if self.AS_Longit_Ctrlmode is None:
        self.AS_Longit_Ctrlmode = 0
      if self.AS_AutoD_EmergBrk_Release is None:
        self.AS_AutoD_EmergBrk_Release = 0
      if self.AS_AutoD_Collision_Release is None:
        self.AS_AutoD_Collision_Release = 0
      if self.AS_AutoD_Accel_Pos_Req is None:
        self.AS_AutoD_Accel_Pos_Req = 0.
      if self.AS_AutoD_Shift_Req is None:
        self.AS_AutoD_Shift_Req = 0
      if self.AS_AutoD_P_Shift_Req is None:
        self.AS_AutoD_P_Shift_Req = 0
      if self.AS_AutoD_BrkMode_Req is None:
        self.AS_AutoD_BrkMode_Req = 0
      if self.AS_AutoD_BrkPelPos_Req is None:
        self.AS_AutoD_BrkPelPos_Req = 0.
      if self.AS_AutoD_Spd_Limit is None:
        self.AS_AutoD_Spd_Limit = 0.
      if self.AS_Auto_Acceleration_Req is None:
        self.AS_Auto_Acceleration_Req = 0.
      if self.AS_AutoD_Life_Signal is None:
        self.AS_AutoD_Life_Signal = 0
      if self.AS_AutoD_Spd_Req is None:
        self.AS_AutoD_Spd_Req = 0.
      if self.AS_Spd_Life_Signal is None:
        self.AS_Spd_Life_Signal = 0
      if self.AS_AlarmLamp_Req is None:
        self.AS_AlarmLamp_Req = 0
      if self.AS_Front_Door_Ctrl_Req is None:
        self.AS_Front_Door_Ctrl_Req = 0
      if self.AS_LowBeam_Start_Req is None:
        self.AS_LowBeam_Start_Req = 0
      if self.AS_TurnLeftLight_Start_Req is None:
        self.AS_TurnLeftLight_Start_Req = 0
      if self.AS_TurnRightLight_Start_Req is None:
        self.AS_TurnRightLight_Start_Req = 0
      if self.AS_MiniLight_Start_Req is None:
        self.AS_MiniLight_Start_Req = 0
      if self.AS_Horn_Start_Req is None:
        self.AS_Horn_Start_Req = 0
      if self.AS_Treadle_Operating_Req is None:
        self.AS_Treadle_Operating_Req = 0
      if self.AS_FDoorButtonLock_Req is None:
        self.AS_FDoorButtonLock_Req = 0
      if self.AS_Mid_Door_Ctrl_Req is None:
        self.AS_Mid_Door_Ctrl_Req = 0
      if self.AS_MDoorButtonLock_Req is None:
        self.AS_MDoorButtonLock_Req = 0
      if self.AS_Rear_Door_Ctrl_Req is None:
        self.AS_Rear_Door_Ctrl_Req = 0
      if self.AS_RDoorButtonLock_Req is None:
        self.AS_RDoorButtonLock_Req = 0
      if self.AS_FrontFog_Req is None:
        self.AS_FrontFog_Req = 0
      if self.AS_RearFog_Req is None:
        self.AS_RearFog_Req = 0
      if self.AS_Warninglight_Req is None:
        self.AS_Warninglight_Req = 0
      if self.AS_HighBeam_Start_Req is None:
        self.AS_HighBeam_Start_Req = 0
      if self.target_x is None:
        self.target_x = 0.
      if self.target_y is None:
        self.target_y = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.auto_mode is None:
        self.auto_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.AS_Strg_Angle_Req = 0.
      self.AS_Strg_WorkMode_Req = 0
      self.AS_Strg0_Enable = 0
      self.AS_Steering_torque_superposition = 0.
      self.AS_Strg_Spd_Req = 0.
      self.AS_Strg1_Enable = 0
      self.AS_Strg_Life_Signal = 0
      self.AS_AutoD_Req = 0
      self.AS_Longit_Ctrlmode = 0
      self.AS_AutoD_EmergBrk_Release = 0
      self.AS_AutoD_Collision_Release = 0
      self.AS_AutoD_Accel_Pos_Req = 0.
      self.AS_AutoD_Shift_Req = 0
      self.AS_AutoD_P_Shift_Req = 0
      self.AS_AutoD_BrkMode_Req = 0
      self.AS_AutoD_BrkPelPos_Req = 0.
      self.AS_AutoD_Spd_Limit = 0.
      self.AS_Auto_Acceleration_Req = 0.
      self.AS_AutoD_Life_Signal = 0
      self.AS_AutoD_Spd_Req = 0.
      self.AS_Spd_Life_Signal = 0
      self.AS_AlarmLamp_Req = 0
      self.AS_Front_Door_Ctrl_Req = 0
      self.AS_LowBeam_Start_Req = 0
      self.AS_TurnLeftLight_Start_Req = 0
      self.AS_TurnRightLight_Start_Req = 0
      self.AS_MiniLight_Start_Req = 0
      self.AS_Horn_Start_Req = 0
      self.AS_Treadle_Operating_Req = 0
      self.AS_FDoorButtonLock_Req = 0
      self.AS_Mid_Door_Ctrl_Req = 0
      self.AS_MDoorButtonLock_Req = 0
      self.AS_Rear_Door_Ctrl_Req = 0
      self.AS_RDoorButtonLock_Req = 0
      self.AS_FrontFog_Req = 0
      self.AS_RearFog_Req = 0
      self.AS_Warninglight_Req = 0
      self.AS_HighBeam_Start_Req = 0
      self.target_x = 0.
      self.target_y = 0.
      self.velocity = 0.
      self.auto_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2h2d6hd3h3dhd18h3dh().pack(_x.AS_Strg_Angle_Req, _x.AS_Strg_WorkMode_Req, _x.AS_Strg0_Enable, _x.AS_Steering_torque_superposition, _x.AS_Strg_Spd_Req, _x.AS_Strg1_Enable, _x.AS_Strg_Life_Signal, _x.AS_AutoD_Req, _x.AS_Longit_Ctrlmode, _x.AS_AutoD_EmergBrk_Release, _x.AS_AutoD_Collision_Release, _x.AS_AutoD_Accel_Pos_Req, _x.AS_AutoD_Shift_Req, _x.AS_AutoD_P_Shift_Req, _x.AS_AutoD_BrkMode_Req, _x.AS_AutoD_BrkPelPos_Req, _x.AS_AutoD_Spd_Limit, _x.AS_Auto_Acceleration_Req, _x.AS_AutoD_Life_Signal, _x.AS_AutoD_Spd_Req, _x.AS_Spd_Life_Signal, _x.AS_AlarmLamp_Req, _x.AS_Front_Door_Ctrl_Req, _x.AS_LowBeam_Start_Req, _x.AS_TurnLeftLight_Start_Req, _x.AS_TurnRightLight_Start_Req, _x.AS_MiniLight_Start_Req, _x.AS_Horn_Start_Req, _x.AS_Treadle_Operating_Req, _x.AS_FDoorButtonLock_Req, _x.AS_Mid_Door_Ctrl_Req, _x.AS_MDoorButtonLock_Req, _x.AS_Rear_Door_Ctrl_Req, _x.AS_RDoorButtonLock_Req, _x.AS_FrontFog_Req, _x.AS_RearFog_Req, _x.AS_Warninglight_Req, _x.AS_HighBeam_Start_Req, _x.target_x, _x.target_y, _x.velocity, _x.auto_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 150
      (_x.AS_Strg_Angle_Req, _x.AS_Strg_WorkMode_Req, _x.AS_Strg0_Enable, _x.AS_Steering_torque_superposition, _x.AS_Strg_Spd_Req, _x.AS_Strg1_Enable, _x.AS_Strg_Life_Signal, _x.AS_AutoD_Req, _x.AS_Longit_Ctrlmode, _x.AS_AutoD_EmergBrk_Release, _x.AS_AutoD_Collision_Release, _x.AS_AutoD_Accel_Pos_Req, _x.AS_AutoD_Shift_Req, _x.AS_AutoD_P_Shift_Req, _x.AS_AutoD_BrkMode_Req, _x.AS_AutoD_BrkPelPos_Req, _x.AS_AutoD_Spd_Limit, _x.AS_Auto_Acceleration_Req, _x.AS_AutoD_Life_Signal, _x.AS_AutoD_Spd_Req, _x.AS_Spd_Life_Signal, _x.AS_AlarmLamp_Req, _x.AS_Front_Door_Ctrl_Req, _x.AS_LowBeam_Start_Req, _x.AS_TurnLeftLight_Start_Req, _x.AS_TurnRightLight_Start_Req, _x.AS_MiniLight_Start_Req, _x.AS_Horn_Start_Req, _x.AS_Treadle_Operating_Req, _x.AS_FDoorButtonLock_Req, _x.AS_Mid_Door_Ctrl_Req, _x.AS_MDoorButtonLock_Req, _x.AS_Rear_Door_Ctrl_Req, _x.AS_RDoorButtonLock_Req, _x.AS_FrontFog_Req, _x.AS_RearFog_Req, _x.AS_Warninglight_Req, _x.AS_HighBeam_Start_Req, _x.target_x, _x.target_y, _x.velocity, _x.auto_mode,) = _get_struct_d2h2d6hd3h3dhd18h3dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2h2d6hd3h3dhd18h3dh().pack(_x.AS_Strg_Angle_Req, _x.AS_Strg_WorkMode_Req, _x.AS_Strg0_Enable, _x.AS_Steering_torque_superposition, _x.AS_Strg_Spd_Req, _x.AS_Strg1_Enable, _x.AS_Strg_Life_Signal, _x.AS_AutoD_Req, _x.AS_Longit_Ctrlmode, _x.AS_AutoD_EmergBrk_Release, _x.AS_AutoD_Collision_Release, _x.AS_AutoD_Accel_Pos_Req, _x.AS_AutoD_Shift_Req, _x.AS_AutoD_P_Shift_Req, _x.AS_AutoD_BrkMode_Req, _x.AS_AutoD_BrkPelPos_Req, _x.AS_AutoD_Spd_Limit, _x.AS_Auto_Acceleration_Req, _x.AS_AutoD_Life_Signal, _x.AS_AutoD_Spd_Req, _x.AS_Spd_Life_Signal, _x.AS_AlarmLamp_Req, _x.AS_Front_Door_Ctrl_Req, _x.AS_LowBeam_Start_Req, _x.AS_TurnLeftLight_Start_Req, _x.AS_TurnRightLight_Start_Req, _x.AS_MiniLight_Start_Req, _x.AS_Horn_Start_Req, _x.AS_Treadle_Operating_Req, _x.AS_FDoorButtonLock_Req, _x.AS_Mid_Door_Ctrl_Req, _x.AS_MDoorButtonLock_Req, _x.AS_Rear_Door_Ctrl_Req, _x.AS_RDoorButtonLock_Req, _x.AS_FrontFog_Req, _x.AS_RearFog_Req, _x.AS_Warninglight_Req, _x.AS_HighBeam_Start_Req, _x.target_x, _x.target_y, _x.velocity, _x.auto_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 150
      (_x.AS_Strg_Angle_Req, _x.AS_Strg_WorkMode_Req, _x.AS_Strg0_Enable, _x.AS_Steering_torque_superposition, _x.AS_Strg_Spd_Req, _x.AS_Strg1_Enable, _x.AS_Strg_Life_Signal, _x.AS_AutoD_Req, _x.AS_Longit_Ctrlmode, _x.AS_AutoD_EmergBrk_Release, _x.AS_AutoD_Collision_Release, _x.AS_AutoD_Accel_Pos_Req, _x.AS_AutoD_Shift_Req, _x.AS_AutoD_P_Shift_Req, _x.AS_AutoD_BrkMode_Req, _x.AS_AutoD_BrkPelPos_Req, _x.AS_AutoD_Spd_Limit, _x.AS_Auto_Acceleration_Req, _x.AS_AutoD_Life_Signal, _x.AS_AutoD_Spd_Req, _x.AS_Spd_Life_Signal, _x.AS_AlarmLamp_Req, _x.AS_Front_Door_Ctrl_Req, _x.AS_LowBeam_Start_Req, _x.AS_TurnLeftLight_Start_Req, _x.AS_TurnRightLight_Start_Req, _x.AS_MiniLight_Start_Req, _x.AS_Horn_Start_Req, _x.AS_Treadle_Operating_Req, _x.AS_FDoorButtonLock_Req, _x.AS_Mid_Door_Ctrl_Req, _x.AS_MDoorButtonLock_Req, _x.AS_Rear_Door_Ctrl_Req, _x.AS_RDoorButtonLock_Req, _x.AS_FrontFog_Req, _x.AS_RearFog_Req, _x.AS_Warninglight_Req, _x.AS_HighBeam_Start_Req, _x.target_x, _x.target_y, _x.velocity, _x.auto_mode,) = _get_struct_d2h2d6hd3h3dhd18h3dh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d2h2d6hd3h3dhd18h3dh = None
def _get_struct_d2h2d6hd3h3dhd18h3dh():
    global _struct_d2h2d6hd3h3dhd18h3dh
    if _struct_d2h2d6hd3h3dhd18h3dh is None:
        _struct_d2h2d6hd3h3dhd18h3dh = struct.Struct("<d2h2d6hd3h3dhd18h3dh")
    return _struct_d2h2d6hd3h3dhd18h3dh
