# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_msgs/Control_Command.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Control_Command(genpy.Message):
  _md5sum = "f60f374299685d30b4c49cb3a4646200"
  _type = "control_msgs/Control_Command"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int16 Adas_BrakeEnable
int16 Adas_ControlMode
int16 Adas_DriveEnable
int16 Adas_GearEnable
int16 Adas_ParkEnable
int16 Adas_StringMode
float64 Adas_TargetBrakePret
float64 Adas_TargetMotTq
float64 Adas_TargetStringAngl
float64 Adas_TargetStringSpd
int16 Adas_F_FogLgtCmd
int16 Adas_FarLgtCmd
int16 Adas_HornCmd
int16 Adas_LampEnable
int16 Adas_NearLgtCmd
int16 Adas_NightLgtCmd
int16 Adas_R_FogLgtCmd
int16 Adas_TurnLgtCmd
float64 target_x
float64 target_y
float64 velocity

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','Adas_BrakeEnable','Adas_ControlMode','Adas_DriveEnable','Adas_GearEnable','Adas_ParkEnable','Adas_StringMode','Adas_TargetBrakePret','Adas_TargetMotTq','Adas_TargetStringAngl','Adas_TargetStringSpd','Adas_F_FogLgtCmd','Adas_FarLgtCmd','Adas_HornCmd','Adas_LampEnable','Adas_NearLgtCmd','Adas_NightLgtCmd','Adas_R_FogLgtCmd','Adas_TurnLgtCmd','target_x','target_y','velocity']
  _slot_types = ['std_msgs/Header','int16','int16','int16','int16','int16','int16','float64','float64','float64','float64','int16','int16','int16','int16','int16','int16','int16','int16','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Adas_BrakeEnable,Adas_ControlMode,Adas_DriveEnable,Adas_GearEnable,Adas_ParkEnable,Adas_StringMode,Adas_TargetBrakePret,Adas_TargetMotTq,Adas_TargetStringAngl,Adas_TargetStringSpd,Adas_F_FogLgtCmd,Adas_FarLgtCmd,Adas_HornCmd,Adas_LampEnable,Adas_NearLgtCmd,Adas_NightLgtCmd,Adas_R_FogLgtCmd,Adas_TurnLgtCmd,target_x,target_y,velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Control_Command, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Adas_BrakeEnable is None:
        self.Adas_BrakeEnable = 0
      if self.Adas_ControlMode is None:
        self.Adas_ControlMode = 0
      if self.Adas_DriveEnable is None:
        self.Adas_DriveEnable = 0
      if self.Adas_GearEnable is None:
        self.Adas_GearEnable = 0
      if self.Adas_ParkEnable is None:
        self.Adas_ParkEnable = 0
      if self.Adas_StringMode is None:
        self.Adas_StringMode = 0
      if self.Adas_TargetBrakePret is None:
        self.Adas_TargetBrakePret = 0.
      if self.Adas_TargetMotTq is None:
        self.Adas_TargetMotTq = 0.
      if self.Adas_TargetStringAngl is None:
        self.Adas_TargetStringAngl = 0.
      if self.Adas_TargetStringSpd is None:
        self.Adas_TargetStringSpd = 0.
      if self.Adas_F_FogLgtCmd is None:
        self.Adas_F_FogLgtCmd = 0
      if self.Adas_FarLgtCmd is None:
        self.Adas_FarLgtCmd = 0
      if self.Adas_HornCmd is None:
        self.Adas_HornCmd = 0
      if self.Adas_LampEnable is None:
        self.Adas_LampEnable = 0
      if self.Adas_NearLgtCmd is None:
        self.Adas_NearLgtCmd = 0
      if self.Adas_NightLgtCmd is None:
        self.Adas_NightLgtCmd = 0
      if self.Adas_R_FogLgtCmd is None:
        self.Adas_R_FogLgtCmd = 0
      if self.Adas_TurnLgtCmd is None:
        self.Adas_TurnLgtCmd = 0
      if self.target_x is None:
        self.target_x = 0.
      if self.target_y is None:
        self.target_y = 0.
      if self.velocity is None:
        self.velocity = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.Adas_BrakeEnable = 0
      self.Adas_ControlMode = 0
      self.Adas_DriveEnable = 0
      self.Adas_GearEnable = 0
      self.Adas_ParkEnable = 0
      self.Adas_StringMode = 0
      self.Adas_TargetBrakePret = 0.
      self.Adas_TargetMotTq = 0.
      self.Adas_TargetStringAngl = 0.
      self.Adas_TargetStringSpd = 0.
      self.Adas_F_FogLgtCmd = 0
      self.Adas_FarLgtCmd = 0
      self.Adas_HornCmd = 0
      self.Adas_LampEnable = 0
      self.Adas_NearLgtCmd = 0
      self.Adas_NightLgtCmd = 0
      self.Adas_R_FogLgtCmd = 0
      self.Adas_TurnLgtCmd = 0
      self.target_x = 0.
      self.target_y = 0.
      self.velocity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6h4d8h3d().pack(_x.Adas_BrakeEnable, _x.Adas_ControlMode, _x.Adas_DriveEnable, _x.Adas_GearEnable, _x.Adas_ParkEnable, _x.Adas_StringMode, _x.Adas_TargetBrakePret, _x.Adas_TargetMotTq, _x.Adas_TargetStringAngl, _x.Adas_TargetStringSpd, _x.Adas_F_FogLgtCmd, _x.Adas_FarLgtCmd, _x.Adas_HornCmd, _x.Adas_LampEnable, _x.Adas_NearLgtCmd, _x.Adas_NightLgtCmd, _x.Adas_R_FogLgtCmd, _x.Adas_TurnLgtCmd, _x.target_x, _x.target_y, _x.velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.Adas_BrakeEnable, _x.Adas_ControlMode, _x.Adas_DriveEnable, _x.Adas_GearEnable, _x.Adas_ParkEnable, _x.Adas_StringMode, _x.Adas_TargetBrakePret, _x.Adas_TargetMotTq, _x.Adas_TargetStringAngl, _x.Adas_TargetStringSpd, _x.Adas_F_FogLgtCmd, _x.Adas_FarLgtCmd, _x.Adas_HornCmd, _x.Adas_LampEnable, _x.Adas_NearLgtCmd, _x.Adas_NightLgtCmd, _x.Adas_R_FogLgtCmd, _x.Adas_TurnLgtCmd, _x.target_x, _x.target_y, _x.velocity,) = _get_struct_6h4d8h3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6h4d8h3d().pack(_x.Adas_BrakeEnable, _x.Adas_ControlMode, _x.Adas_DriveEnable, _x.Adas_GearEnable, _x.Adas_ParkEnable, _x.Adas_StringMode, _x.Adas_TargetBrakePret, _x.Adas_TargetMotTq, _x.Adas_TargetStringAngl, _x.Adas_TargetStringSpd, _x.Adas_F_FogLgtCmd, _x.Adas_FarLgtCmd, _x.Adas_HornCmd, _x.Adas_LampEnable, _x.Adas_NearLgtCmd, _x.Adas_NightLgtCmd, _x.Adas_R_FogLgtCmd, _x.Adas_TurnLgtCmd, _x.target_x, _x.target_y, _x.velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.Adas_BrakeEnable, _x.Adas_ControlMode, _x.Adas_DriveEnable, _x.Adas_GearEnable, _x.Adas_ParkEnable, _x.Adas_StringMode, _x.Adas_TargetBrakePret, _x.Adas_TargetMotTq, _x.Adas_TargetStringAngl, _x.Adas_TargetStringSpd, _x.Adas_F_FogLgtCmd, _x.Adas_FarLgtCmd, _x.Adas_HornCmd, _x.Adas_LampEnable, _x.Adas_NearLgtCmd, _x.Adas_NightLgtCmd, _x.Adas_R_FogLgtCmd, _x.Adas_TurnLgtCmd, _x.target_x, _x.target_y, _x.velocity,) = _get_struct_6h4d8h3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6h4d8h3d = None
def _get_struct_6h4d8h3d():
    global _struct_6h4d8h3d
    if _struct_6h4d8h3d is None:
        _struct_6h4d8h3d = struct.Struct("<6h4d8h3d")
    return _struct_6h4d8h3d
